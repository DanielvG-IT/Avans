<div class="container py-4">
  <!-- Header + Quick Actions -->
  <div class="d-flex align-items-center justify-content-between mb-3 flex-wrap gap-2">
    <h1 class="h4 mb-0">Create Rental</h1>
    <small class="text-muted">
      Staff: {{#if staff}}{{staff.first_name}} {{staff.last_name}}{{else}}{{user.name}}{{/if}}
    </small>
    <div class="d-flex gap-2 flex-wrap">
      <a href="/staff/crm/new" class="btn btn-sm btn-outline-success">New Customer</a>
      <a href="/movies/new" class="btn btn-sm btn-outline-info">New Movie</a>
    </div>
  </div>

  <!-- server-provided safe bootstrap values (base64 JSON) -->
  <input type="hidden" id="bootstrapPreselectedCustomer" value="{{preselectedCustomerB64}}">
  <input type="hidden" id="bootstrapPreselectedMovie" value="{{preselectedMovieB64}}">


  <form id="rentalForm" class="needs-validation" novalidate>
    <input type="hidden" id="staffId" name="staffId" value="{{staff.staff_id}}">
    <div class="row g-3">
      <!-- LEFT: selectors & cart -->
      <div class="col-12 col-xl-7">

        <!-- Customer Card -->
        <div class="card mb-3 shadow-sm">
          <div class="card-body">
            <h2 class="h6">Customer</h2>
            <div class="mb-2 position-relative">
              <input id="customerSearch" class="form-control" placeholder="Search customer by name / email / phone"
                aria-label="Search customer" autocomplete="off">
              <input type="hidden" id="customerId" name="customerId">
              <div class="list-group position-absolute w-100 shadow-sm d-none" id="customerDropdown" role="listbox">
              </div>
            </div>

            <div id="selectedCustomer" class="mb-3 d-none">
              <div class="small text-muted">Selected</div>
              <div class="d-flex align-items-center gap-3">
                <div class="fw-semibold" id="selectedCustomerName"></div>
                <div class="text-muted small" id="selectedCustomerMeta"></div>
                <button type="button" id="clearCustomer" class="btn btn-sm btn-outline-secondary ms-auto">Clear</button>
              </div>
            </div>
          </div>
        </div>

        <!-- Movie Card -->
        <div class="card mb-3 shadow-sm">
          <div class="card-body">
            <h2 class="h6">Find a Movie</h2>
            <div class="mb-2 position-relative">
              <input id="movieSearch" class="form-control" placeholder="Type to search movies..."
                aria-label="Search movies" autocomplete="off">
              <div class="list-group position-absolute w-100 shadow-sm d-none" id="movieDropdown" role="listbox"></div>
            </div>

            <div id="selectedMovie" class="mb-3 d-none p-2 border rounded bg-light">
              <div class="small text-muted">Selected</div>
              <div class="d-flex align-items-center justify-content-between">
                <div>
                  <div class="fw-semibold" id="selectedMovieTitle"></div>
                  <div class="small text-muted" id="selectedMovieMeta"></div>
                </div>
                <div class="d-flex gap-2">
                  <button type="button" id="addSelectedMovie" class="btn btn-sm btn-primary">Add</button>
                  <button type="button" id="clearSelectedMovie" class="btn btn-sm btn-outline-secondary">Clear</button>
                </div>
              </div>
            </div>
            <div class="text-muted small mb-2">Tip: press <kbd>Enter</kbd> to add highlighted movie</div>
            <button type="button" id="openMovieModal" class="btn btn-outline-primary btn-sm d-none"
              data-bs-toggle="modal" data-bs-target="#movieDetailModal">View Movie</button>
          </div>
        </div>

        <!-- Cart -->
        <div class="card mb-3 shadow-sm">
          <div class="card-body">
            <h2 class="h6">Rental Cart</h2>
            <div class="table-responsive">
              <table class="table table-sm table-hover align-middle mb-0" id="cartTable">
                <thead class="table-light">
                  <tr>
                    <th>Item</th>
                    <th class="text-end">Rate</th>
                    <th class="text-end">Subtotal</th>
                    <th></th>
                  </tr>
                </thead>
                <tbody></tbody>
              </table>
            </div>
            <div id="emptyCart" class="text-muted small mt-2">No movies added yet.</div>
          </div>
        </div>
      </div>

      <!-- RIGHT: summary & confirm -->
      <div class="col-12 col-xl-5">
        <div class="card mb-3 sticky-top shadow-sm p-3" style="top:1rem; background:#fff;">
          <h2 class="h6">Summary</h2>
          <dl class="row mb-3">
            <dt class="col-6 small text-muted">Items</dt>
            <dd class="col-6 text-end" id="summaryItems">0</dd>
            <dt class="col-6 small text-muted">Subtotal</dt>
            <dd class="col-6 text-end" id="summarySubtotal">€0.00</dd>
            <dt class="col-6 small text-muted">Tax (0%)</dt>
            <dd class="col-6 text-end" id="summaryTax">€0.00</dd>
            <dt class="col-6 small text-muted">Total</dt>
            <dd class="col-6 text-end h5 fw-bold" id="summaryTotal">€0.00</dd>
          </dl>

          <div class="mb-3">
            <label for="storeId" class="form-label">Store</label>
            <select id="storeId" name="storeId" class="form-select" required>
              {{#each stores}}<option value="{{this.store_id}}">{{this.name}}</option>{{/each}}
            </select>
          </div>
          <div class="mb-3">
            <label for="paymentAmount" class="form-label">Amount Received</label>
            <input id="paymentAmount" name="paymentAmount" type="number" min="0" step="0.01" class="form-control">
          </div>

          <div class="d-grid gap-2">
            <button id="confirmBtn" type="button" class="btn btn-primary" disabled>Confirm Rental</button>
            <a href="/staff/crm" class="btn btn-outline-secondary">Cancel</a>
          </div>
          <div id="formFeedback" class="mt-3" role="status" aria-live="polite"></div>
        </div>
      </div>
    </div>
  </form>
</div>

<!-- Movie Modal -->
<div class="modal fade" id="movieDetailModal" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog modal-lg modal-dialog-centered">
    <div class="modal-content shadow-sm">
      <div class="modal-header">
        <h5 class="modal-title" id="movieModalTitle">Movie</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body" id="movieModalBody"></div>
    </div>
  </div>
</div>

<style>
  .list-group.position-absolute {
    z-index: 1200;
    max-height: 360px;
    overflow: auto;
  }

  .table-hover tbody tr:hover {
    background-color: #f8f9fa;
  }

  .sticky-top {
    border-radius: 0.5rem;
  }

  @media(max-width:1199px) {
    .sticky-top {
      position: static !important;
      top: auto !important;
    }
  }
</style>


<script>
  const RENTALS_ENDPOINT = '/rentals/new';
  /* ---------------------------
    Helper functions & state
  ----------------------------*/
  const debounce = (fn, wait = 250) => {
    let t;
    return (...args) => {
      clearTimeout(t);
      t = setTimeout(() => fn(...args), wait);
    };
  };
  const fmtMoney = (n) => '€' + Number(n || 0).toFixed(2);
  let cart = []; // { film_id, title, rental_duration, rental_rate, qty, subtotal }

  /* ---------------------------
    Typeahead utilities (movies/customers)
  ----------------------------*/
  function attachTypeahead(inputEl, dropdownEl, fetchUrl, onSelect, renderItem) {
    let currentList = []; // keep last fetched list so Enter can select without click
    inputEl.addEventListener('input', debounce((ev) => {
      const q = ev.target.value.trim();
      if (!q) { hideDropdown(); return; }
      fetch(fetchUrl + encodeURIComponent(q))
        .then(res => res.json())
        .then(list => {
          if (!Array.isArray(list) || list.length === 0) { hideDropdown(); return; }
          currentList = list;
          dropdownEl.innerHTML = '';
          list.forEach((item, idx) => {
            const el = document.createElement('button');
            el.type = 'button';
            el.className = 'list-group-item list-group-item-action';
            el.setAttribute('role', 'option');
            el.dataset.index = idx;
            el.innerHTML = renderItem(item);
            el.addEventListener('click', () => {
              onSelect(item, { viaKeyboard: false });
              hideDropdown();
            });
            dropdownEl.appendChild(el);
          });
          dropdownEl.classList.remove('d-none');
        })
        .catch(err => { console.error(err); hideDropdown(); });
    }, 200));

    inputEl.addEventListener('keydown', (ev) => {
      const visible = !dropdownEl.classList.contains('d-none');
      if (!visible) return;
      const active = dropdownEl.querySelector('.active');
      if (ev.key === 'ArrowDown') {
        ev.preventDefault();
        if (!active) { dropdownEl.firstElementChild?.classList.add('active'); return; }
        const next = active.nextElementSibling || dropdownEl.firstElementChild;
        active.classList.remove('active');
        next.classList.add('active');
      } else if (ev.key === 'ArrowUp') {
        ev.preventDefault();
        if (!active) { dropdownEl.lastElementChild?.classList.add('active'); return; }
        const prev = active.previousElementSibling || dropdownEl.lastElementChild;
        active.classList.remove('active');
        prev.classList.add('active');
      } else if (ev.key === 'Enter') {
        ev.preventDefault();
        const toSel = active || dropdownEl.firstElementChild;
        if (toSel) {
          const idx = Number(toSel.dataset.index || 0);
          const item = currentList[idx];
          if (item) onSelect(item, { viaKeyboard: true });
        }
        hideDropdown();
      } else if (ev.key === 'Escape') {
        hideDropdown();
      }
    });

    const hideDropdown = () => { dropdownEl.classList.add('d-none'); dropdownEl.innerHTML = ''; };
    document.addEventListener('click', (e) => { if (!dropdownEl.contains(e.target) && e.target !== inputEl) hideDropdown(); });
    return { hideDropdown };
  }

  /* ---------------------------
    Movie typeahead setup -> uses /movies/search?q=
  ----------------------------*/
  const movieInput = document.getElementById('movieSearch');
  const movieDropdown = document.getElementById('movieDropdown');
  let lastSelectedMovie = null;

  // selected movie panel elements (no duration input)
  const selectedMoviePanel = document.getElementById('selectedMovie');
  const selectedMovieTitle = document.getElementById('selectedMovieTitle');
  const selectedMovieMeta = document.getElementById('selectedMovieMeta');
  const addSelectedMovieBtn = document.getElementById('addSelectedMovie');
  const clearSelectedMovieBtn = document.getElementById('clearSelectedMovie');

  attachTypeahead(movieInput, movieDropdown, '/movies/search?q=', (movie, meta) => {
    lastSelectedMovie = movie;

    // show fixed duration from movie object
    selectedMovieTitle.textContent = `${movie.title} ${movie.release_year ? '(' + movie.release_year + ')' : ''}`;
    selectedMovieMeta.textContent = `${(movie.rating || '')} ${movie.length ? '· ' + movie.length + ' min' : ''} · ${fmtMoney(movie.rental_rate)} · ${(Number(movie.rental_duration) || 1)}d`;
    selectedMoviePanel.classList.remove('d-none');

    const viewBtn = document.getElementById('openMovieModal');
    viewBtn.classList.remove('d-none');
    viewBtn.dataset.filmId = movie.film_id;

    // Enter adds with fixed duration
    if (meta && meta.viaKeyboard) {
      addToCart({
        film_id: movie.film_id,
        title: movie.title,
        rental_duration: Number(movie.rental_duration) || 1,
        rental_rate: Number(movie.rental_rate || 0),
        length: movie.length
      });
      movieInput.value = '';
    }
  }, (m) => {
    return `<div><strong>${escapeHtml(m.title)}</strong> <small class="text-muted">(${m.release_year || ''})</small></div>
          <div class="small text-muted">${escapeHtml(m.rating || '')} &middot; ${m.length ?? '-'} min &middot; ${fmtMoney(m.rental_rate)}</div>`;
  });

  // Panel actions
  addSelectedMovieBtn?.addEventListener('click', () => {
    if (!lastSelectedMovie) return;
    addToCart({
      film_id: lastSelectedMovie.film_id,
      title: lastSelectedMovie.title,
      rental_duration: Number(lastSelectedMovie.rental_duration) || 1,
      rental_rate: Number(lastSelectedMovie.rental_rate || 0),
      length: lastSelectedMovie.length
    });
    movieInput.focus();
  });
  clearSelectedMovieBtn?.addEventListener('click', () => {
    lastSelectedMovie = null;
    selectedMoviePanel.classList.add('d-none');
  });

  /* open movie modal details and allow add to cart */
  const movieModal = document.getElementById('movieDetailModal');
  movieModal.addEventListener('show.bs.modal', (ev) => {
    const btn = ev.relatedTarget;
    const filmId = btn?.dataset?.filmid || btn?.dataset?.filmId || (lastSelectedMovie && lastSelectedMovie.film_id);
    if (!filmId) return;
    const movie = lastSelectedMovie && String(lastSelectedMovie.film_id) === String(filmId) ? lastSelectedMovie : null;
    if (movie) renderMovieModal(movie);
    else fetch('/movies/' + encodeURIComponent(filmId) + '?format=json') // CHANGED: request JSON
      .then(r => r.json())
      .then(renderMovieModal)
      .catch(() => { });
  });

  function renderMovieModal(movie) {
    document.getElementById('movieModalTitle').textContent = movie.title + ' — ' + (movie.release_year || '');
    document.getElementById('movieModalBody').innerHTML = `
    <p class="mb-2 small text-muted">${escapeHtml(movie.rating || '')} &middot; ${movie.length ?? '-'} min &middot; ${fmtMoney(movie.rental_rate || 0)} (per ${movie.rental_duration ?? 'unit'})</p>
    <p>${escapeHtml(movie.description || '')}</p>
    <div class="d-flex gap-2 mt-3">
      <button id="addMovieModalBtn" class="btn btn-primary">Add to cart</button>
      <button class="btn btn-outline-secondary" data-bs-dismiss="modal">Close</button>
    </div>
  `;
    document.getElementById('addMovieModalBtn').onclick = () => {
      addToCart({
        film_id: movie.film_id,
        title: movie.title,
        rental_duration: movie.rental_duration || 1,
        rental_rate: Number(movie.rental_rate || 0),
        length: movie.length
      });
      const bs = bootstrap.Modal.getInstance(movieModal);
      bs.hide();
    };
  }

  /* ---------------------------
    Customer typeahead setup -> uses /staff/crm/search?q=
  ----------------------------*/
  const customerInput = document.getElementById('customerSearch');
  const customerDropdown = document.getElementById('customerDropdown');
  const selectedCustomerPanel = document.getElementById('selectedCustomer');
  const selectedCustomerName = document.getElementById('selectedCustomerName');
  const selectedCustomerMeta = document.getElementById('selectedCustomerMeta');
  const customerIdInput = document.getElementById('customerId');
  const clearCustomerBtn = document.getElementById('clearCustomer');

  attachTypeahead(customerInput, customerDropdown, '/staff/crm/search?q=', (c) => {
    customerIdInput.value = c.customer_id;
    selectedCustomerPanel.classList.remove('d-none');
    selectedCustomerName.textContent = `${c.first_name} ${c.last_name}`;
    selectedCustomerMeta.textContent = `${c.email || ''} ${c.phone ? '· ' + c.phone : ''}`;
    customerInput.value = '';
  }, (c) => `<div><strong>${escapeHtml(c.first_name)} ${escapeHtml(c.last_name)}</strong></div><div class="small text-muted">${escapeHtml(c.email || '')} ${c.phone ? '&middot; ' + escapeHtml(c.phone) : ''}</div>`);

  clearCustomerBtn?.addEventListener('click', () => {
    customerIdInput.value = '';
    selectedCustomerPanel.classList.add('d-none');
  });

  /* ---------------------------
    Cart functionality
  ----------------------------*/
  const cartTbody = document.querySelector('#cartTable tbody');
  const emptyCartEl = document.getElementById('emptyCart');
  const summaryItems = document.getElementById('summaryItems');
  const summarySubtotal = document.getElementById('summarySubtotal');
  const summaryTax = document.getElementById('summaryTax');
  const summaryTotal = document.getElementById('summaryTotal');
  const confirmBtn = document.getElementById('confirmBtn');
  const paymentAmount = document.getElementById('paymentAmount');

  function addToCart(item = {}) {
    const idx = cart.findIndex(c => String(c.film_id) === String(item.film_id));
    if (idx >= 0) {
      cart[idx].qty += 1;
      cart[idx].subtotal = +(cart[idx].qty * cart[idx].rental_rate).toFixed(2);
    } else {
      cart.push({
        film_id: item.film_id,
        title: item.title,
        rental_duration: Number(item.rental_duration) || 1, // fixed from movie
        rental_rate: Number(item.rental_rate) || 0,
        qty: 1,
        subtotal: Number(item.rental_rate || 0)
      });
    }
    renderCart();
  }

  function renderCart() {
    cartTbody.innerHTML = '';
    if (cart.length === 0) {
      emptyCartEl.classList.remove('d-none');
      confirmBtn.disabled = true;
    } else {
      emptyCartEl.classList.add('d-none');
      confirmBtn.disabled = false;
      cart.forEach((row, i) => {
        const tr = document.createElement('tr');
        tr.innerHTML = `
        <td>
          <div class="fw-semibold">${escapeHtml(row.title)}</div>
          <div class="small text-muted">x${row.qty} · ${row.rental_duration}d</div>
        </td>
        <td class="text-end">${fmtMoney(row.rental_rate)}</td>
        <td class="text-end">${fmtMoney(row.subtotal)}</td>
        <td class="text-end">
          <button type="button" class="btn btn-sm btn-outline-danger removeBtn" data-idx="${i}" title="Remove">×</button>
        </td>
      `;
        cartTbody.appendChild(tr);
      });
    }
    attachCartListeners();
    updateSummary();
  }

  function attachCartListeners() {
    document.querySelectorAll('.removeBtn').forEach(btn => {
      btn.onclick = () => {
        const idx = Number(btn.dataset.idx);
        cart.splice(idx, 1);
        renderCart();
      };
    });
  }

  function updateSummary() {
    const items = cart.reduce((s, r) => s + r.qty, 0);
    const subtotal = cart.reduce((s, r) => s + (r.subtotal || 0), 0);
    const tax = 0;
    const total = subtotal + tax;
    summaryItems.textContent = items;
    summarySubtotal.textContent = fmtMoney(subtotal);
    summaryTax.textContent = fmtMoney(tax);
    summaryTotal.textContent = fmtMoney(total);
  }

  /* ---------------------------
    Submit — POSTs to /rental/new for each cart item
  ----------------------------*/
  confirmBtn.addEventListener('click', () => {
    const customerId = document.getElementById('customerId').value;
    // removed: startDate, expectedReturn, paymentMethod
    const staffId = document.getElementById('staffId').value;
    const paymentAmt = Number(paymentAmount.value || 0);
    const storeId = document.getElementById('storeId').value;

    if (!customerId) return showFeedback('Please select a customer.', 'danger');
    if (!cart.length) return showFeedback('Please add at least one movie to the cart.', 'danger');
    // removed: start/return validation
    if (!staffId) return showFeedback('No staff selected. Please sign in again.', 'danger');
    if (!storeId) return showFeedback('Please select a store.', 'danger');

    confirmBtn.disabled = true;
    showFeedback('Submitting rental(s)...', 'info');

    const requests = cart.map(item => {
      const body = {
        movieId: item.film_id,
        customerId: Number(customerId),
        staffId: Number(staffId),
        storeId: Number(storeId),
        paymentAmount: paymentAmt,
        qty: item.qty,
        rental_duration: item.rental_duration,
        rental_rate: item.rental_rate
      };
      return fetch(RENTALS_ENDPOINT, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(body)
      }).then(r => r.json().catch(() => { throw new Error('Invalid JSON response'); }));
    });

    Promise.all(requests)
      .then(results => {
        // Accept success if all returned without error (server should return success flag)
        const failed = results.filter(r => !r || r.error || !r.success);
        if (failed.length) {
          showFeedback('Some rentals failed: ' + (failed[0].error || 'Unknown error'), 'danger');
          confirmBtn.disabled = false;
          return;
        }
        showFeedback('All rentals created successfully!', 'success');
        const rentalId = results[0] && results[0].rental && results[0].rental.rental_id || results[0].rentalId || '';
        setTimeout(() => {
          window.location.href = '/staff/';
        }, 700);
      })
      .catch(err => {
        console.error(err);
        showFeedback('Network or server error.', 'danger');
        confirmBtn.disabled = false;
      });
  });

  /* small helpers */
  function showFeedback(msg, level = 'info') {
    const el = document.getElementById('formFeedback');
    el.innerHTML = `<div class="alert alert-${level}">${escapeHtml(msg)}</div>`;
  }
  function escapeHtml(s) {
    if (s === null || s === undefined) return '';
    return String(s).replace(/[&<>"']/g, function (m) {
      return ({ '&': '&amp;', '<': '&lt;', '>': '&gt;', '"': '&quot;', "'": '&#39;' }[m]);
    });
  }

  /* ---------------------------
     Auto prefill support (robust)
     ----------------------------*/
  document.addEventListener('DOMContentLoaded', () => {
    const fromB64Json = (b64) => {
      if (!b64) return null;
      try { return JSON.parse(atob(b64)); }
      catch (e) { console.warn('Failed to parse base64 JSON:', e, b64); return null; }
    };

    const movieB64El = document.getElementById('bootstrapPreselectedMovie');
    const custB64El = document.getElementById('bootstrapPreselectedCustomer');

    // parse if present
    window.preselectedCustomer = custB64El && custB64El.value ? fromB64Json(custB64El.value) : (window.__PRESELECTED_CUSTOMER || null);
    window.preselectedMovie = movieB64El && movieB64El.value ? fromB64Json(movieB64El.value) : (window.__PRESELECTED_MOVIE || null);

    // Debug logging so you can quickly see what's being passed
    if (window.preselectedCustomer) console.debug('Preselected customer:', window.preselectedCustomer);
    if (window.preselectedMovie) console.debug('Preselected movie:', window.preselectedMovie);

    // Helper that normalizes customer object shape
    const normalizeCustomer = (c) => {
      if (!c) return null;
      return {
        id: c.customer_id ?? c.customerId ?? c.id ?? null,
        firstName: c.first_name ?? c.firstName ?? '',
        lastName: c.last_name ?? c.lastName ?? '',
        email: c.email ?? '',
        phone: c.phone ?? c.phone_number ?? ''
      };
    };

    // Helper that normalizes movie object shape and ensures numbers
    const normalizeMovie = (m) => {
      if (!m) return null;
      const rentalRateRaw = m.rental_rate ?? m.rentalRate ?? m.rate ?? 0;
      const rentalDurationRaw = m.rental_duration ?? m.rentalDuration ?? m.duration ?? 1;
      return {
        id: m.film_id ?? m.filmId ?? m.id ?? null,
        title: m.title ?? m.name ?? '',
        release_year: m.release_year ?? m.releaseYear ?? null,
        rental_rate: Number(String(rentalRateRaw).replace(',', '.')) || 0,
        rental_duration: Number(rentalDurationRaw) || 1,
        length: Number(m.length ?? m.runtime ?? 0) || 0,
        rating: m.rating ?? ''
      };
    };

    // Prefill customer UI if available
    const cust = normalizeCustomer(window.preselectedCustomer);
    if (cust && cust.id) {
      if (typeof customerIdInput !== 'undefined' && customerIdInput) {
        customerIdInput.value = cust.id;
        selectedCustomerPanel.classList.remove('d-none');
        selectedCustomerName.textContent = `${cust.firstName} ${cust.lastName}`.trim();
        selectedCustomerMeta.textContent = [cust.email, cust.phone].filter(Boolean).join(' · ');
      } else {
        console.warn('customerIdInput not present in DOM — cannot prefill customer.');
      }
    }

    // Prefill movie UI if available and add to cart
    const movieRaw = normalizeMovie(window.preselectedMovie);
    if (movieRaw && movieRaw.id) {
      // set lastSelectedMovie (used by modal / add button)
      lastSelectedMovie = movieRaw;

      // update UI
      if (selectedMovieTitle && selectedMovieMeta && selectedMoviePanel) {
        selectedMovieTitle.textContent = `${movieRaw.title} ${movieRaw.release_year ? '(' + movieRaw.release_year + ')' : ''}`.trim();
        selectedMovieMeta.textContent = `${(movieRaw.rating || '')} ${movieRaw.length ? '· ' + movieRaw.length + ' min' : ''} · ${fmtMoney(movieRaw.rental_rate)} · ${movieRaw.rental_duration}d`;
        selectedMoviePanel.classList.remove('d-none');
      }

      const viewBtn = document.getElementById('openMovieModal');
      if (viewBtn) {
        viewBtn.classList.remove('d-none');
        // normalize to the dataset key we use elsewhere (filmId)
        viewBtn.dataset.filmId = movieRaw.id;
      }

      // add to cart using normalized values
      addToCart({
        film_id: movieRaw.id,
        title: movieRaw.title,
        rental_duration: movieRaw.rental_duration,
        rental_rate: movieRaw.rental_rate,
        length: movieRaw.length
      });

      if (movieInput) movieInput.value = '';
    }

    // render initial cart
    renderCart();
  });
</script>