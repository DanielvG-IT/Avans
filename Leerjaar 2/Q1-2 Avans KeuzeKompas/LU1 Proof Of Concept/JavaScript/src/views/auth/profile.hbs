<div class="container py-4">
  <div class="row gy-4 gx-4">
    <!-- Left: Profile / Avatar -->
    <div class="col-12 col-md-4 text-center">
      <div class="mb-3">
        <div id="avatarDrop" class="avatar-drop shadow-sm" role="button" tabindex="0" ondragover="handleDragOver(event)"
          ondragleave="handleDragLeave(event)" ondrop="handleDrop(event)">
          {{#if user.avatar}}
          <img id="profileAvatar" src="{{user.avatar}}" alt="{{user.name}} avatar" class="avatar-img rounded-circle"
            loading="lazy">
          {{else}}
          <div id="profileAvatar" aria-hidden="true">
            <span class="placeholder-avatar">U</span>
          </div>
          {{/if}}
        </div>
      </div>

      <!-- Avatar actions -->
      <div class="d-flex justify-content-center gap-2 mb-3 flex-wrap">
        <label for="avatarInput" class="btn btn-sm btn-outline-light">
          <i class="bi bi-camera me-1"></i>Change
        </label>
        <input type="file" id="avatarInput" class="d-none" accept=".jpg,.jpeg,.png,.webp"
          onchange="previewAvatar(event)">
        <button type="button" onclick="removeAvatar()" class="btn btn-sm btn-outline-light">
          <i class="bi bi-trash me-1"></i>Remove
        </button>
      </div>

      <!-- Save Avatar -->
      <div class="d-flex flex-column align-items-center">
        <button onclick="saveAvatar()" id="saveAvatarBtn" class="btn btn-primary btn-sm d-none mb-2">
          <i class="bi bi-upload me-1"></i>Save Avatar
        </button>
        <div id="avatarFeedback" class="alert d-none w-100 small mt-2" role="alert"></div>
      </div>

      <!-- User meta -->
      <div class="mt-3">
        <p class="text-light small mb-1">{{user.email}}</p>
        <span class="badge bg-primary rounded-pill">{{user.role}}</span>
      </div>
    </div>

    <!-- Right: Account Details -->
    <div class="col-12 col-md-8">
      <div class="content-card p-4">
        <h4 class="card-title">Account Details</h4>
        <div class="small text-light mb-3">
          <p class="mb-1"><strong>User ID:</strong> {{user.userId}}</p>
          <p class="mb-1"><strong>Email:</strong> {{user.email}}</p>
          {{#if user.role}}<p class="mb-1"><strong>Role:</strong> {{user.role}}</p>{{/if}}
          {{#if user.avatarFormat}}<p class="mb-1"><strong>Avatar Format:</strong> {{user.avatarFormat}}</p>{{/if}}
        </div>

        <hr style="border-color:var(--border); opacity:0.6;">

        <h5 class="card-title mt-3">Password Reset</h5>
        <form onsubmit="clientPasswordReset(event)" aria-label="password reset form">
          <div class="mb-3">
            <label for="newPassword" class="form-label text-light">New Password</label>
            <input type="password" id="newPassword" name="newPassword" class="form-control form-control-lg"
              placeholder="Enter new password" required>
          </div>
          <div class="d-grid">
            <button type="submit" class="btn btn-primary btn-lg">
              <i class="bi bi-envelope-check me-1"></i>Send password reset
            </button>
          </div>
        </form>

        <div class="mt-3">
          <div id="errorMessage" class="alert alert-danger d-none" role="alert">
            <p class="mb-0"></p>
          </div>
          <div id="successMessage" class="alert alert-success d-none" role="status">
            <p class="mb-0"></p>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  /* Avatar */
  .avatar-drop {
    width: 120px;
    height: 120px;
    border-radius: 50%;
    overflow: hidden;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    border: 2px solid rgba(255, 255, 255, 0.08);
    transition: transform 0.15s ease, box-shadow 0.15s ease;
    background: linear-gradient(180deg, rgba(255, 255, 255, 0.02), rgba(0, 0, 0, 0.05));
  }

  .avatar-drop:hover {
    transform: scale(1.05);
    box-shadow: 0 0 0 4px rgba(255, 255, 255, 0.05);
  }

  .avatar-img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    display: block;
  }

  .placeholder-avatar {
    font-size: 36px;
    font-weight: 700;
    color: var(--text);
  }

  /* Form inputs */
  .form-control {
    background: #fff;
    color: #222;
    border-color: #555;
    border-color: rgba(255, 255, 255, 0.14);
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.25);
  }

  /* Alerts */
  .alert {
    border-radius: 8px;
    padding: .5rem .75rem;
    font-size: .875rem;
  }

  /* Badges */
  .badge {
    font-size: .75rem;
    font-weight: 600;
    padding: .4em .7em;
  }

  /* Responsive */
  @media (max-width: 767px) {
    .avatar-drop {
      width: 96px;
      height: 96px;
    }

    .content-card {
      padding: 1rem;
    }
  }
</style>

<script>
  async function clientPasswordReset(event) {
    event.preventDefault();

    const newPassword = document.getElementById('newPassword').value;
    const errorMessage = document.getElementById('errorMessage');
    const successMessage = document.getElementById('successMessage');

    errorMessage.classList.add('d-none');
    successMessage.classList.add('d-none');

    try {
      const response = await fetch('/auth/reset-password', {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        credentials: 'include',
        body: JSON.stringify({ newPassword })
      });

      if (response.ok) {
        successMessage.querySelector('p').textContent = 'Password reset successful!';
        successMessage.classList.remove('d-none');
        document.getElementById('newPassword').value = '';
        setTimeout(() => {
          successMessage.classList.add('d-none');
        }, 2500);
      } else {
        const data = await response.json();
        errorMessage.querySelector('p').textContent = data.message || 'Password reset failed. Try again.';
        errorMessage.classList.remove('d-none');
      }
    } catch (err) {
      errorMessage.querySelector('p').textContent = 'Network error. Try again.';
      errorMessage.classList.remove('d-none');
    }
  }

  function previewAvatar(e) {
    const file = e.target.files && e.target.files[0];
    if (!file) return;

    const avatarEl = document.getElementById('profileAvatar');
    const url = URL.createObjectURL(file);

    if (avatarEl.tagName === 'IMG') {
      avatarEl.src = url;
    } else {
      const img = document.createElement('img');
      img.id = 'profileAvatar';
      img.alt = '{{user.name}} avatar';
      img.src = url;
      img.className = 'rounded-circle';
      img.style.width = '100%';
      img.style.height = '100%';
      img.style.objectFit = 'cover';
      img.style.display = 'block';
      img.style.border = '2px solid rgba(255,255,255,0.6)';
      img.style.boxShadow = '0 4px 10px rgba(0,0,0,0.12)';
      avatarEl.replaceWith(img);
    }

    // Show Save button
    document.getElementById('saveAvatarBtn').classList.remove('d-none');
    document.getElementById('avatarFeedback').textContent = '';
  }

  // Drag & drop handlers
  function handleDragOver(e) {
    e.preventDefault();
    e.stopPropagation();
    const el = document.getElementById('avatarDrop');
    el.style.boxShadow = '0 0 0 4px rgba(0,123,255,0.15)';
    el.style.transform = 'scale(1.02)';
  }

  function handleDragLeave(e) {
    e.preventDefault();
    e.stopPropagation();
    const el = document.getElementById('avatarDrop');
    el.style.boxShadow = '';
    el.style.transform = '';
  }

  function handleDrop(e) {
    e.preventDefault();
    e.stopPropagation();
    const el = document.getElementById('avatarDrop');
    el.style.boxShadow = '';
    el.style.transform = '';

    const file = e.dataTransfer?.files?.[0];
    if (!file) return;

    // Trigger preview
    previewAvatar({ target: { files: [file] } });

    // Populate hidden input for later upload
    try {
      const input = document.getElementById('avatarInput');
      const dt = new DataTransfer();
      dt.items.add(file);
      input.files = dt.files;
    } catch (err) { /* ignore if not supported */ }
  }

  async function saveAvatar() {
    const input = document.getElementById('avatarInput');
    const file = input && input.files && input.files[0];
    const feedbackEl = document.getElementById('avatarFeedback');

    if (!file) return;

    // Reset feedback and ensure feedback is visible when needed
    if (feedbackEl) {
      feedbackEl.textContent = '';
      feedbackEl.classList.remove('text-success', 'text-danger', 'd-none');
    }

    const form = new FormData();
    form.append('avatar', file);

    try {
      const response = await fetch('/auth/profile/avatar', {
        method: 'POST',
        credentials: 'include', // keep cookies if used for auth
        body: form // let browser set Content-Type for multipart/form-data
      });

      const data = await response.json().catch(() => ({}));

      if (response.ok) {
        feedbackEl.className = "alert alert-success w-100 mt-2";
        feedbackEl.textContent = data.message || "Avatar saved successfully!";
        document.getElementById('saveAvatarBtn').classList.add('d-none');
        setTimeout(() => feedbackEl.classList.add("d-none"), 2500);
      } else {
        feedbackEl.className = "alert alert-danger w-100 mt-2";
        feedbackEl.textContent = data.error || data.message || "Failed to save avatar.";
      }

    } catch (err) {
      console.error(err);
      if (feedbackEl) {
        feedbackEl.classList.remove('d-none', 'text-success');
        feedbackEl.classList.add('text-danger');
        feedbackEl.textContent = 'Network error. Try again.';
      }
    }
  }
  async function removeAvatar() {
    const feedbackEl = document.getElementById('avatarFeedback');

    try {
      const response = await fetch('/auth/profile/avatar', {
        method: 'DELETE',
        credentials: 'include'
      });

      const data = await response.json().catch(() => ({}));

      if (response.ok) {
        // Reset to initial letter avatar
        const drop = document.getElementById('avatarDrop');
        const fallback = document.createElement('div');
        fallback.id = 'profileAvatar';
        fallback.className = 'rounded-circle bg-secondary text-white d-inline-flex align-items-center justify-content-center';
        fallback.style.cssText = 'width:100%; height:100%; font-size:36px; font-weight:600;';
        fallback.textContent = "U";

        const currentAvatar = document.getElementById('profileAvatar');
        currentAvatar.replaceWith(fallback);

        feedbackEl.className = "alert alert-success w-100 mt-2";
        feedbackEl.textContent = data.message || "Avatar removed.";
        feedbackEl.classList.remove("d-none");

        setTimeout(() => feedbackEl.classList.add("d-none"), 2500);
      } else {
        feedbackEl.className = "alert alert-danger w-100 mt-2";
        feedbackEl.textContent = data.error || data.message || "Failed to remove avatar.";
        feedbackEl.classList.remove("d-none");
      }
    } catch (err) {
      feedbackEl.className = "alert alert-danger w-100 mt-2";
      feedbackEl.textContent = "Network error. Try again.";
      feedbackEl.classList.remove("d-none");
    }
  }

</script>