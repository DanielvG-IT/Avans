<style>
    /* local helpers, same as login */
    .bi.spin {
        animation: spin 0.9s linear infinite;
    }

    @keyframes spin {
        to {
            transform: rotate(360deg);
        }
    }

    .login-wrapper {
        max-width: 640px;
        margin: 0 auto;
    }

    .card-title {
        margin-bottom: .25rem;
        font-weight: 600;
    }

    .form-text-muted {
        color: #cfcfcf;
        font-size: .95rem;
    }

    @media (max-width: 576px) {
        .content-actions {
            flex-direction: column;
            gap: .5rem;
        }
    }
</style>

<div class="login-wrapper">
    <div class="d-flex align-items-start justify-content-between mb-3">
        <div>
            <h4 class="card-title">User Registration</h4>
            <p class="form-text-muted mb-0">Create an account to get started</p>
        </div>
        <div class="ms-2 d-none d-sm-flex align-items-center">
            <i class="bi bi-person-plus-fill" aria-hidden="true" style="font-size:1.4rem;color:#cfcfcf"></i>
        </div>
    </div>

    <form id="registerForm" onsubmit="clientRegister(event)" novalidate>
        <!-- Name Fields -->
        <div class="row gx-2 mb-3">
            <div class="col-md-6">
                <label for="first-name" class="form-label">First Name</label>
                <input type="text" class="form-control form-control-lg" id="first-name" placeholder="Janny" required>
            </div>
            <div class="col-md-6">
                <label for="last-name" class="form-label">Last Name</label>
                <input type="text" class="form-control form-control-lg" id="last-name" placeholder="Doe" required>
            </div>
        </div>

        <!-- Email -->
        <div class="mb-3">
            <label for="email" class="form-label">Email Address</label>
            <input type="email" class="form-control form-control-lg" id="email" placeholder="janny@example.com"
                required>
        </div>

        <!-- Password -->
        <div class="mb-3">
            <label for="password" class="form-label">Password</label>
            <input type="password" class="form-control form-control-lg" id="password" placeholder="••••••••" required>
        </div>

        <!-- Confirm Password -->
        <div class="mb-3">
            <label for="confirm-password" class="form-label">Confirm Password</label>
            <input type="password" class="form-control form-control-lg" id="confirm-password" placeholder="••••••••"
                required>
        </div>

        <!-- Address -->
        <div class="mb-3">
            <label for="address" class="form-label">Address</label>
            <input type="text" class="form-control form-control-lg" id="address" placeholder="Main Street 123" required>
        </div>

        <div class="row gx-2 mb-3">
            <div class="col-md-6">
                <label for="postal-code" class="form-label">Postal Code</label>
                <input type="text" class="form-control form-control-lg" id="postal-code" placeholder="12345" required>
            </div>
            <div class="col-md-6">
                <label for="location" class="form-label">City</label>
                <input type="text" class="form-control form-control-lg" id="location" placeholder="Amsterdam" required>
            </div>
        </div>

        <div class="row gx-2 mb-3">
            <div class="col-md-6">
                <label for="province" class="form-label">Province/State</label>
                <input type="text" class="form-control form-control-lg" id="province" placeholder="North Holland"
                    required>
            </div>
            <div class="col-md-6">
                <label for="country-name" class="form-label">Country</label>
                <input type="text" class="form-control form-control-lg" id="country-name" placeholder="Netherlands"
                    required>
            </div>
        </div>

        <!-- Phone -->
        <div class="mb-3">
            <label for="phone" class="form-label">Phone</label>
            <input type="tel" class="form-control form-control-lg" id="phone" placeholder="+31 6 12345678">
        </div>

        <!-- Store -->
        <div class="mb-3">
            <label for="store-id" class="form-label">Select Store</label>
            <select id="store-id" class="form-select form-select-lg" required>
                {{#each stores}}
                <option value="{{this.id}}">{{this.name}}</option>
                {{/each}}
            </select>
        </div>

        <!-- Terms -->
        <div class="mb-3 form-check">
            <input type="checkbox" class="form-check-input" id="terms" required>
            <label for="terms" class="form-check-label">I agree to the Terms of Service</label>
        </div>

        <!-- Alerts -->
        <div id="errorMessage" class="alert alert-danger d-none" role="alert"></div>
        <div id="successMessage" class="alert alert-success d-none" role="alert"></div>

        <!-- Submit -->
        <div class="d-grid mb-3">
            <button type="submit" class="btn btn-primary btn-lg" aria-label="Register">
                <i class="bi bi-person-check-fill me-2" aria-hidden="true"></i> Register
            </button>
        </div>
    </form>

    <!-- Secondary actions -->
    <div class="d-flex justify-content-between align-items-center content-actions">
        <a href="/auth/login" class="btn btn-outline-light btn-sm" role="button" aria-label="Back to login">
            <i class="bi bi-box-arrow-in-left me-1" aria-hidden="true"></i> Back to login
        </a>
    </div>
</div>

<script>
    async function clientRegister(event) {
        event.preventDefault();

        const form = document.getElementById('registerForm');
        const submitBtn = form.querySelector('button[type="submit"]');
        const errorMessage = document.getElementById('errorMessage');
        const successMessage = document.getElementById('successMessage');

        // spinner state
        submitBtn.disabled = true;
        const originalHtml = submitBtn.innerHTML;
        submitBtn.innerHTML = '<i class="bi bi-arrow-repeat spin me-2"></i> Registering...';

        errorMessage.classList.add('d-none');
        successMessage.classList.add('d-none');

        const val = (id) => document.getElementById(id)?.value.trim() || '';

        const data = {
            firstName: val('first-name'),
            lastName: val('last-name'),
            email: val('email'),
            password: document.getElementById('password').value,
            confirmPassword: document.getElementById('confirm-password').value,
            address: val('address'),
            postalCode: val('postal-code'),
            city: val('location'),
            province: val('province'),
            countryName: val('country-name'),
            phone: val('phone'),
            storeId: document.getElementById('store-id').value,
            terms: document.getElementById('terms').checked
        };

        if (!data.terms) {
            errorMessage.textContent = 'You must agree to the Terms of Service.';
            errorMessage.classList.remove('d-none');
            submitBtn.disabled = false;
            submitBtn.innerHTML = originalHtml;
            return;
        }

        if (data.password !== data.confirmPassword) {
            errorMessage.textContent = 'Passwords do not match.';
            errorMessage.classList.remove('d-none');
            submitBtn.disabled = false;
            submitBtn.innerHTML = originalHtml;
            return;
        }

        try {
            const res = await fetch('/auth/register', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(data)
            });

            let result;
            try { result = await res.json(); } catch { result = null; }

            if (!res.ok || !result) {
                throw new Error(result?.error || result?.message || `Registration failed (${res.status}).`);
            }

            if (result.success === false) {
                throw new Error(result.error || result.message || 'Registration failed.');
            }

            successMessage.textContent = result.message || 'Registration successful! Redirecting to login...';
            successMessage.classList.remove('d-none');
            form.reset();
            setTimeout(() => window.location.replace('/auth/login'), 2000);

        } catch (err) {
            errorMessage.textContent = err.message || 'An unexpected error occurred.';
            errorMessage.classList.remove('d-none');
        } finally {
            submitBtn.disabled = false;
            submitBtn.innerHTML = originalHtml;
        }
    }
</script>