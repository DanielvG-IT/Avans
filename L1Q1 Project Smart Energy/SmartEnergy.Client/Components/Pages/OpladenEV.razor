@page "/opladen-ev"
@attribute [StreamRendering]
@rendermode InteractiveServer
@inject IMeasurementRepository measurementRepository;

<PageTitle>Opaden EV</PageTitle>
<h1>Opaden EV (variant F)</h1>
<p>U kunt hier gedetailleerde informatie vinden over de energieverbruikspatronen en de kosten die gepaard gaan met het opladen van elektrische voertuigen. De gegevens worden in real-time bijgewerkt om u de meest actuele informatie te bieden. 
  <br/> Daarnaast kunt u grafieken en tabellen bekijken die inzicht geven in de laadsessies over verschillende tijdsperioden. Dit helpt u om trends te herkennen en uw energieverbruik efficiënter te beheren.</p><hr>
<div class="main-content" style="width: 100%;">
  <div class="laadsessies" style="margin-top: 0.5rem; width: 100%;">
    <div class="button-row-container" style="display: flex; height: 4rem; gap: 1rem;">
      <div class="btn-group" role="group" aria-label="Basic radio toggle button group">
        <input type="radio" class="btn-check" name="btnradio" id="btnradio2" autocomplete="off" checked />
        <label class="btn btn-outline-primary d-flex justify-content-center align-items-center" for="btnradio2" @onclick="() => prijsCategorieDynamisch = false" checked>Vast</label>
        <input type="radio" class="btn-check" name="btnradio" id="btnradio1" autocomplete="off" />
        <label class="btn btn-outline-primary d-flex justify-content-center align-items-center" for="btnradio1" @onclick="() => prijsCategorieDynamisch = true">Dynamisch</label>
      </div>
      <div class="form-floating mb-3" style="width: 11rem; height: 4rem;">
        <input type="number" min="3500" style="height: 4rem;" class="form-control" id="floatingInputValue" placeholder="3500" aria-label="3500" aria-describedby="button-addon2" @bind="detectieVermogenW">
        <label for="floatingInputValue">Detectiepunt (Watt)</label>
      </div>
      <div class="form-floating mb-3" style="width: 11rem; height: 4rem;">
        <input type="number" min="1" max="30" style="height: 4rem;" class="form-control" id="floatingInputValue" placeholder="3500" aria-label="3500" aria-describedby="button-addon2" @bind="numberOfDays">
        <label for="floatingInputValue">Aantal dagen</label>
      </div>
      <div class="form-floating mb-3" style="width: 11rem; height: 4rem;">
        <input type="number" min="0" style="height: 4rem;" class="form-control" id="floatingInputValue" placeholder="5" aria-label="5" aria-describedby="button-addon2" @bind="minimumduur">
        <label for="floatingInputValue">minimumduur (minuten)</label>
      </div>
      <div class="form-floating mb-3" style="width: 11rem; height: 4rem;">
        <input type="number" min="0" style="height: 4rem;" class="form-control" id="floatingInputValue" placeholder="0,25" aria-label="0,25" aria-describedby="button-addon2" @bind="prijsCatagorieVast">
        <label for="floatingInputValue">Prijs per kWh (Euro)</label>
      </div>
      <button class="btn btn-primary" type="submit" @onclick="LoadDataAsync">Refresh</button>
    </div>
    @if (currentPowerData != null)
    {
      @if(Laadsessies.Count == 0 || Laadsessies == null) 
      {
        <p style="margin-top: 2rem;">Helaas geen laadsessies beschikbaar. Probeer de pagina opnieuw te laden!</p>
      }
      else
      {<div style="margin-top: 1rem;">
        <table class="table">
              <thead>
                <tr>
                  <th>Start</th>
                  <th>Stop</th>
                  <th>Duration</th>
                  <th>Used kWh</th>
                  <th>Price</th>
                </tr>
              </thead>
              @foreach (Laadsessie sessie in Laadsessies)
                {
                <tbody>
                  <tr>
                    <td>@sessie.Start</td>
                    <td>@sessie.Stop</td>
                    <td>@sessie.Duur</td>
                    <td>@sessie.TotaalKWh.ToString("F2") kWh</td>
                    <td>@sessie.Prijs.ToString("C")</td>
                  </tr>
                </tbody>

                }
          </table>
        </div>
      }      
    }
    else
    {
      <div style="display: flex; flex-direction: column; justify-content: center; align-items: center; text-align: center; width: 100%;">
        <p style="margin-top: 1rem;">Calculating</p>
        <div class="spinner-border text-dark" role="status">
          <span class="visually-hidden">Data wordt opgehaald...</span>
        </div>
      </div> 
    }
    </div>
  </div> 


@code {
  // Variable for database connection
  double detectieVermogenW = 3500D;
  int meterId = 10019163;
  int numberOfDays = 30;
  string aggegationWindow = "1m";
  private List<Measurement>? currentPowerData;

// Variable for LaadsessieDetectie
  int minimumduur = 5;
  double prijsCatagorieVast = 0.25D;
  bool prijsCategorieDynamisch = false;
  private List<Laadsessie> Laadsessies = new List<Laadsessie>();

protected override async Task OnInitializedAsync()
{
  await LoadDataAsync(); 
}

private async Task LoadDataAsync()
{
    Laadsessies = new List<Laadsessie>();
    bool laadsessieActief = default;
    double totaalkWhLaadsessie = default;
    double prijsLaadsessie = default;
    TimeSpan duurLaadsessie = default;
    DateTime startLaadsessie = default;
    DateTime stopLaadsessie = default;
    currentPowerData = await this.measurementRepository.GetPowerUsed(meterId, numberOfDays, aggegationWindow);

  // Algoritme laadsessie detectie
    foreach(var measurement in currentPowerData) {
      if(measurement.Value.Value > detectieVermogenW && laadsessieActief == false) 
      {
        startLaadsessie = measurement.Timestamp;
        laadsessieActief = true;
        totaalkWhLaadsessie += measurement.Value.Value * (1D / 60D) / 1000D;
        prijsLaadsessie += measurement.EnergyPrice.Value * (measurement.Value.Value * (1D / 60D) / 1000D);
      }

      else if(measurement.Value.Value > detectieVermogenW) 
      {
        totaalkWhLaadsessie += measurement.Value.Value * (1D / 60D) / 1000D;
        prijsLaadsessie += measurement.EnergyPrice.Value * (measurement.Value.Value * (1D / 60D) / 1000D);
      }

      else if(measurement.Value < detectieVermogenW && laadsessieActief == true) 
      {
        stopLaadsessie = measurement.Timestamp;
        duurLaadsessie = stopLaadsessie.Subtract(startLaadsessie);
      
      // Calculate prijs met vaste prijs
        if(prijsCategorieDynamisch == false) 
        {
          prijsLaadsessie = totaalkWhLaadsessie * prijsCatagorieVast;
        }
        
        prijsLaadsessie = Math.Round(prijsLaadsessie, 2);
        totaalkWhLaadsessie = Math.Round(totaalkWhLaadsessie, 2);
      
      // Check minimum duration
        if(duurLaadsessie.TotalMinutes >= minimumduur)
        {
          var singleLaadsessie = new Laadsessie(startLaadsessie, stopLaadsessie, duurLaadsessie, totaalkWhLaadsessie, prijsLaadsessie);
          Laadsessies.Add(singleLaadsessie);
        }
        
        laadsessieActief = default;
        totaalkWhLaadsessie = default;
        prijsLaadsessie = default;
        duurLaadsessie = default;
        startLaadsessie = default;
        stopLaadsessie = default;
      }

      else {
        continue;
      }
    }
    await InvokeAsync(StateHasChanged);
  }
}