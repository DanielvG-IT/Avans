{
	"info": {
		"_postman_id": "213d4e23-ada6-4a96-8836-8dc671cda643",
		"name": "HQB.WebApi - SystemTests",
		"description": "Collection with sample requests, tests, and fake data for HQB.WebApi.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "41979928",
		"_collection_link": "https://healthquestgrinders.postman.co/workspace/1a4f09df-9e55-47df-bedb-25ac3388ad4f/collection/41979928-213d4e23-ada6-4a96-8836-8dc671cda643?action=share&source=collection_link&creator=41979928"
	},
	"item": [
		{
			"name": "Login User",
			"item": [
				{
					"name": "Login User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"bearer_token\", pm.response.json().accessToken);",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.tokenType).to.exist;",
									"    pm.expect(responseData.accessToken).to.exist;",
									"    pm.expect(responseData.expiresIn).to.exist;",
									"    pm.expect(responseData.refreshToken).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"AccessToken is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.accessToken).to.be.a('string').and.to.have.lengthOf.at.least(1, \"AccessToken should be a non-empty string\");",
									"});",
									"",
									"",
									"pm.test(\"Verify that expiresIn value is a positive integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.expiresIn).to.be.a('number').and.to.be.above(0, \"ExpiresIn value should be a positive integer\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"test@test.nl\",\n  \"password\": \"Test123!\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Guardian For Current User",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({\r",
									"    key: 'Authorization',\r",
									"    value: 'Bearer ' + pm.environment.get('bearer_token')\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"currentGuardianId\", pm.response.json().id);",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.include.all.keys('id', 'firstName', 'lastName', 'userID');",
									"});",
									"",
									"",
									"pm.test(\"ID is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"ID should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"First name and last name are non-empty strings\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.firstName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"First name should not be empty\");",
									"    pm.expect(responseData.lastName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Last name should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"User ID is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.userID).to.be.a('string').and.to.have.lengthOf.at.least(1, \"User ID should not be empty\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/guardian",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"guardian"
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/guardian",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"guardian"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"id\": \"<uuid>\",\n    \"userID\": \"<string>\"\n  },\n  {\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"id\": \"<uuid>\",\n    \"userID\": \"<string>\"\n  }\n]"
						}
					]
				}
			]
		},
		{
			"name": "PatientScherm",
			"item": [
				{
					"name": "Get All Doctors",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({\r",
									"    key: 'Authorization',\r",
									"    value: 'Bearer ' + pm.environment.get('bearer_token')\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(doctor) {",
									"        pm.expect(doctor).to.have.property('id');",
									"        pm.expect(doctor).to.have.property('userID');",
									"        pm.expect(doctor).to.have.property('firstName');",
									"        pm.expect(doctor).to.have.property('lastName');",
									"        pm.expect(doctor).to.have.property('specialization');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"First name and last name should be non-empty strings\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('array');",
									"  responseData.forEach(function(doctor) {",
									"    pm.expect(doctor).to.have.property('firstName').that.is.a('string').and.not.empty;",
									"    pm.expect(doctor).to.have.property('lastName').that.is.a('string').and.not.empty;",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"Specialization is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    responseData.forEach(function(doctor) {",
									"        pm.expect(doctor).to.be.an('object');",
									"        pm.expect(doctor.specialization).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Specialization should not be empty\");",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/doctors",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"doctors"
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/doctors",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"doctors"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"specialization\": \"<string>\",\n    \"id\": \"<uuid>\"\n  },\n  {\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"specialization\": \"<string>\",\n    \"id\": \"<uuid>\"\n  }\n]"
						}
					]
				},
				{
					"name": "Get All Treatments",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - id and name\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(item) {",
									"        pm.expect(item).to.have.property('id');",
									"        pm.expect(item).to.have.property('name');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Id is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('array');",
									"  responseData.forEach(function(treatment) {",
									"    pm.expect(treatment.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Id should not be empty\");",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"Name is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(treatment) {",
									"        pm.expect(treatment.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/treatments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"treatments"
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/treatments",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"treatments"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"name\": \"<string>\",\n    \"id\": \"<uuid>\"\n  },\n  {\n    \"name\": \"<string>\",\n    \"id\": \"<uuid>\"\n  }\n]"
						}
					]
				},
				{
					"name": "Add Patient",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({\r",
									"    key: 'Authorization',\r",
									"    value: 'Bearer ' + pm.environment.get('bearer_token')\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"createdPatientId\", pm.response.json().id);",
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData).to.have.property('id');",
									"  pm.expect(responseData).to.have.property('firstName');",
									"  pm.expect(responseData).to.have.property('lastName');",
									"  pm.expect(responseData).to.have.property('guardianID');",
									"  pm.expect(responseData).to.have.property('treatmentID');",
									"  pm.expect(responseData).to.have.property('doctorID');",
									"  pm.expect(responseData).to.have.property('avatar');",
									"  pm.expect(responseData).to.have.property('doctorAccessJournal');",
									"  pm.expect(responseData).to.have.property('guardianAccessJournal');",
									"});",
									"",
									"",
									"pm.test(\"ID is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"ID should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Avatar is one of the specified values\", function () {",
									"    const responseData = pm.response.json();",
									"    const validAvatarValues = ['Kat', 'Hond', 'Paard', 'Vogel'];",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(validAvatarValues).to.include(responseData.avatar);",
									"});",
									"",
									"",
									"pm.test(\"Doctor and Guardian access journals are boolean values\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.doctorAccessJournal).to.be.a('boolean');",
									"    pm.expect(responseData.guardianAccessJournal).to.be.a('boolean');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"Test\",\n  \"lastName\": \"Account\",\n  \"avatar\": \"Kat\",\n  \"guardianID\": \"{{currentGuardianId}}\",\n  \"treatmentID\": \"{{currentTreatmentId}}\",\n  \"doctorID\": \"2c6ebbb3-ec7b-428a-b18f-4d3b358daa2e\",\n  \"doctorAccessJournal\": false,\n  \"guardianAccessJournal\": false\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/patient",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"patient"
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"avatar\": \"<string>\",\n  \"id\": \"<uuid>\",\n  \"guardianID\": \"<uuid>\",\n  \"treatmentID\": \"<uuid>\",\n  \"doctorID\": \"<uuid>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/patient",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"patient"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"avatar\": \"<string>\",\n  \"id\": \"<uuid>\",\n  \"guardianID\": \"<uuid>\",\n  \"treatmentID\": \"<uuid>\",\n  \"doctorID\": \"<uuid>\"\n}"
						}
					]
				},
				{
					"name": "Get Patient By Id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({\r",
									"    key: 'Authorization',\r",
									"    value: 'Bearer ' + pm.environment.get('bearer_token')\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('firstName');",
									"    pm.expect(responseData).to.have.property('lastName');",
									"    pm.expect(responseData).to.have.property('guardianID');",
									"    pm.expect(responseData).to.have.property('treatmentID');",
									"    pm.expect(responseData).to.have.property('doctorID');",
									"    pm.expect(responseData).to.have.property('avatar');",
									"    pm.expect(responseData).to.have.property('doctorAccessJournal');",
									"    pm.expect(responseData).to.have.property('guardianAccessJournal');",
									"});",
									"",
									"",
									"pm.test(\"ID is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"ID should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Doctor and guardian access journals are boolean values\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.doctorAccessJournal).to.be.a('boolean');",
									"  pm.expect(responseData.guardianAccessJournal).to.be.a('boolean');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/patient/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"patient",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{createdPatientId}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/patient/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"patient",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"avatar\": \"<string>\",\n  \"id\": \"<uuid>\",\n  \"guardianID\": \"<uuid>\",\n  \"treatmentID\": \"<uuid>\",\n  \"doctorID\": \"<uuid>\"\n}"
						}
					]
				},
				{
					"name": "Generate Personal Appointments",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({\r",
									"    key: 'Authorization',\r",
									"    value: 'Bearer ' + pm.environment.get('bearer_token')\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/patient/:id/appointments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"patient",
								":id",
								"appointments"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{createdPatientId}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/patient/:id/appointments",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"patient",
										":id",
										"appointments"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "GameScherm",
			"item": [
				{
					"name": "Get Appointments By Treatment Id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({\r",
									"    key: 'Authorization',\r",
									"    value: 'Bearer ' + pm.environment.get('bearer_token')\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    ",
									"    responseData.forEach(function(appointment) {",
									"        pm.expect(appointment).to.include.all.keys('id', 'name', 'description', 'url', 'image', 'durationInMinutes', 'treatmentID', 'sequence');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"ID is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  responseData.forEach(function(appointment) {",
									"    pm.expect(appointment.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"ID should be a non-empty string\");",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"DurationInMinutes is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(appointment => {",
									"        pm.expect(appointment.durationInMinutes).to.be.a('number').and.to.be.at.least(0);",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Verify that treatmentID is equal to the query parameter value\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    responseData.forEach(appointment => {",
									"        pm.expect(appointment.treatmentID).to.equal(pm.request.url.query.get(\"treatmentId\"));",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/appointments?treatmentId={{currentTreatmentId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"appointments"
							],
							"query": [
								{
									"key": "treatmentId",
									"value": "{{currentTreatmentId}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/appointments?treatmentId=<uuid>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"appointments"
									],
									"query": [
										{
											"key": "treatmentId",
											"value": "<uuid>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"id\": \"<uuid>\",\n    \"url\": \"<string>\",\n    \"image\": \"<string>\",\n    \"durationInMinutes\": \"<integer>\",\n    \"treatmentID\": \"<uuid>\",\n    \"sequence\": \"<integer>\"\n  },\n  {\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"id\": \"<uuid>\",\n    \"url\": \"<string>\",\n    \"image\": \"<string>\",\n    \"durationInMinutes\": \"<integer>\",\n    \"treatmentID\": \"<uuid>\",\n    \"sequence\": \"<integer>\"\n  }\n]"
						}
					]
				},
				{
					"name": "Get Personal Appointments",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({\r",
									"    key: 'Authorization',\r",
									"    value: 'Bearer ' + pm.environment.get('bearer_token')\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"personalAppointmentId\", pm.response.json()[0].id);",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    ",
									"    responseData.forEach(function(appointment) {",
									"        pm.expect(appointment).to.include.all.keys('id', 'patientID', 'appointmentID', 'appointmentDate', 'completedDate', 'completedQuestion', 'sequence');",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/patient/:id/appointments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"patient",
								":id",
								"appointments"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{createdPatientId}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/patient/:id/appointments",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"patient",
										":id",
										"appointments"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"id\": \"<uuid>\",\n    \"url\": \"<string>\",\n    \"image\": \"<string>\",\n    \"durationInMinutes\": \"<integer>\",\n    \"treatmentID\": \"<uuid>\",\n    \"sequence\": \"<integer>\"\n  },\n  {\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"id\": \"<uuid>\",\n    \"url\": \"<string>\",\n    \"image\": \"<string>\",\n    \"durationInMinutes\": \"<integer>\",\n    \"treatmentID\": \"<uuid>\",\n    \"sequence\": \"<integer>\"\n  }\n]"
						}
					]
				},
				{
					"name": "Complete Personal Appointment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({\r",
									"    key: 'Authorization',\r",
									"    value: 'Bearer ' + pm.environment.get('bearer_token')\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 204\", function () {\r",
									"  pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/patient/:id/appointments/:personalAppointmentId/complete",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"patient",
								":id",
								"appointments",
								":personalAppointmentId",
								"complete"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{createdPatientId}}",
									"description": "(Required) "
								},
								{
									"key": "personalAppointmentId",
									"value": "{{personalAppointmentId}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/patient/:id/appointments/:personalAppointmentId/complete",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"patient",
										":id",
										"appointments",
										":personalAppointmentId",
										"complete"
									],
									"variable": [
										{
											"key": "id"
										},
										{
											"key": "personalAppointmentId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "StickerboekScherm",
			"item": [
				{
					"name": "Get All Stickers",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({\r",
									"    key: 'Authorization',\r",
									"    value: 'Bearer ' + pm.environment.get('bearer_token')\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"stickerId\", pm.response.json()[0].id);",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - id, name, and unlockedDate\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    ",
									"    responseData.forEach(function(item) {",
									"        pm.expect(item).to.have.property('id');",
									"        pm.expect(item).to.have.property('name');",
									"        pm.expect(item).to.have.property('unlockedDate');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Response is in JSON format\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Id and name must be non-empty strings\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"  ",
									"  responseData.forEach(function(item) {",
									"    pm.expect(item.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Id should not be empty\");",
									"    pm.expect(item.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
									"  });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/stickers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"stickers"
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/stickers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"stickers"
									]
								}
							},
							"_postman_previewlanguage": "",
							"header": "",
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Add Sticker To Patient",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({\r",
									"    key: 'Authorization',\r",
									"    value: 'Bearer ' + pm.environment.get('bearer_token')\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"    pm.expect(pm.response.to.have.status(201));",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - id, name, and unlockedDate\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('name');",
									"    pm.expect(responseData).to.have.property('unlockedDate');",
									"});",
									"",
									"",
									"pm.test(\"Id is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Id should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"UnlockedDate is either null or in a valid date format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('unlockedDate').that.satisfies((unlockedDate) => {",
									"        return unlockedDate === null || !isNaN(Date.parse(unlockedDate));",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/patient/:id/stickers?stickerId={{stickerId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"patient",
								":id",
								"stickers"
							],
							"query": [
								{
									"key": "stickerId",
									"value": "{{stickerId}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "{{createdPatientId}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/patient/:id/stickers?stickerId=<uuid>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"patient",
										":id",
										"stickers"
									],
									"query": [
										{
											"key": "stickerId",
											"value": "<uuid>"
										}
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Get Stickers",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({\r",
									"    key: 'Authorization',\r",
									"    value: 'Bearer ' + pm.environment.get('bearer_token')\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - id, name, and unlockedDate\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(sticker) {",
									"        pm.expect(sticker.id).to.exist;",
									"        pm.expect(sticker.name).to.exist;",
									"        pm.expect(sticker.unlockedDate).to.exist;",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Id is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    responseData.forEach(function(sticker) {",
									"        pm.expect(sticker.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Id should not be empty\");",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/patient/:id/stickers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"patient",
								":id",
								"stickers"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{createdPatientId}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/patient/:id/stickers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"patient",
										":id",
										"stickers"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"name\": \"<string>\",\n    \"id\": \"<uuid>\",\n    \"unlockedDate\": \"<dateTime>\"\n  },\n  {\n    \"name\": \"<string>\",\n    \"id\": \"<uuid>\",\n    \"unlockedDate\": \"<dateTime>\"\n  }\n]"
						}
					]
				}
			]
		},
		{
			"name": "DagboekScherm",
			"item": [
				{
					"name": "Post Journal",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"    pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.id).to.exist;",
									"    pm.expect(responseData.patientID).to.exist;",
									"    pm.expect(responseData.date).to.exist;",
									"    pm.expect(responseData.title).to.exist;",
									"    pm.expect(responseData.content).to.exist;",
									"    pm.expect(responseData.rating).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"PatientID is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.patientID).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Rating is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.rating).to.be.a('number');",
									"    pm.expect(responseData.rating).to.be.at.least(0, \"Rating should be a non-negative integer\");",
									"});",
									"",
									"pm.environment.set(\"createdJournalId\", pm.response.json().id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"date\": \"DateTime.UTCNow()\",\n  \"title\": \"Testing the tile!\",\n  \"content\": \"TEST123!TEST123!TEST123!TEST123!TEST123!TEST123!TEST123!TEST123!\",\n  \"patientID\": \"{{createdPatientId}}\",\n  \"rating\": \"7\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/journal",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"journal"
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"date\": \"DateTime.UTCNow()\",\n  \"title\": \"Testing the tile!\",\n  \"content\": \"TEST123!TEST123!TEST123!TEST123!TEST123!TEST123!TEST123!TEST123!\",\n  \"patientID\": \"{{createdPatientId}}\",\n  \"rating\": \"7\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/journal",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"journal"
									]
								}
							},
							"_postman_previewlanguage": "",
							"header": "",
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Get Journal Entries",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({\r",
									"    key: 'Authorization',\r",
									"    value: 'Bearer ' + pm.environment.get('bearer_token')\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('array');",
									"  responseData.forEach(entry => {",
									"    pm.expect(entry).to.have.property('id');",
									"    pm.expect(entry).to.have.property('patientID');",
									"    pm.expect(entry).to.have.property('date');",
									"    pm.expect(entry).to.have.property('title');",
									"    pm.expect(entry).to.have.property('content');",
									"    pm.expect(entry).to.have.property('rating');",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"Rating is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    responseData.forEach(entry => {",
									"        pm.expect(entry.rating).to.be.a('number');",
									"        pm.expect(entry.rating).to.be.at.least(0);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/patient/:id/journal-entries",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"patient",
								":id",
								"journal-entries"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{createdPatientId}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/patient/:id/journal-entries",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"patient",
										":id",
										"journal-entries"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"date\": \"<string>\",\n    \"title\": \"<string>\",\n    \"content\": \"<string>\",\n    \"id\": \"<uuid>\",\n    \"patientID\": \"<uuid>\",\n    \"rating\": \"<integer>\"\n  },\n  {\n    \"date\": \"<string>\",\n    \"title\": \"<string>\",\n    \"content\": \"<string>\",\n    \"id\": \"<uuid>\",\n    \"patientID\": \"<uuid>\",\n    \"rating\": \"<integer>\"\n  }\n]"
						}
					]
				},
				{
					"name": "Update Patient to deny premission",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.include.all.keys('id', 'firstName', 'lastName', 'guardianID', 'treatmentID', 'doctorID', 'avatar', 'doctorAccessJournal', 'guardianAccessJournal');",
									"});",
									"",
									"",
									"pm.test(\"ID is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"ID should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Avatar is one of the specified values\", function () {",
									"    const responseData = pm.response.json();",
									"    const validAvatarValues = ['Kat', 'Hond', 'Paard', 'Vogel'];",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(validAvatarValues).to.include(responseData.avatar);",
									"});",
									"",
									"",
									"pm.test(\"Doctor and guardian access journals are boolean values\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.doctorAccessJournal).to.be.a('boolean');",
									"  pm.expect(responseData.guardianAccessJournal).to.be.a('boolean');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"Test\",\n  \"lastName\": \"Account\",\n  \"avatar\": \"Kat\",\n  \"guardianID\": \"{{currentGuardianId}}\",\n  \"treatmentID\": \"{{currentTreatmentId}}\",\n  \"doctorID\": \"2c6ebbb3-ec7b-428a-b18f-4d3b358daa2e\",\n  \"doctorAccessJournal\": true,\n  \"guardianAccessJournal\": true\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/patient/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"patient",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{createdPatientId}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"firstName\": \"Test\",\n  \"lastName\": \"Account\",\n  \"avatar\": \"Kat\",\n  \"guardianID\": \"{{currentGuardianId}}\",\n  \"treatmentID\": \"{{currentTreatmentId}}\",\n  \"doctorID\": \"2c6ebbb3-ec7b-428a-b18f-4d3b358daa2e\",\n  \"doctorAccessJournal\": true,\n  \"guardianAccessJournal\": true\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/patient/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"patient",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{createdPatientId}}",
											"description": "(Required) "
										}
									]
								}
							},
							"_postman_previewlanguage": "",
							"header": "",
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "MonitorScherm",
			"item": [
				{
					"name": "Get Journal Entries with Premission",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({\r",
									"    key: 'Authorization',\r",
									"    value: 'Bearer ' + pm.environment.get('bearer_token')\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(entry => {",
									"        pm.expect(entry.id).to.be.a('string');",
									"        pm.expect(entry.patientID).to.be.a('string');",
									"        pm.expect(entry.date).to.be.a('string');",
									"        pm.expect(entry.title).to.be.a('string');",
									"        pm.expect(entry.content).to.be.a('string');",
									"        pm.expect(entry.rating).to.be.a('number');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Rating is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    responseData.forEach(entry => {",
									"        pm.expect(entry.rating).to.be.a('number');",
									"        pm.expect(entry.rating).to.be.at.least(1);",
									"        pm.expect(entry.rating).to.be.at.most(10);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/patient/:id/journal-entries",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"patient",
								":id",
								"journal-entries"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{createdPatientId}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/patient/:id/journal-entries",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"patient",
										":id",
										"journal-entries"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"date\": \"<string>\",\n    \"title\": \"<string>\",\n    \"content\": \"<string>\",\n    \"id\": \"<uuid>\",\n    \"patientID\": \"<uuid>\",\n    \"rating\": \"<integer>\"\n  },\n  {\n    \"date\": \"<string>\",\n    \"title\": \"<string>\",\n    \"content\": \"<string>\",\n    \"id\": \"<uuid>\",\n    \"patientID\": \"<uuid>\",\n    \"rating\": \"<integer>\"\n  }\n]"
						}
					]
				}
			]
		},
		{
			"name": "CleanUp",
			"item": [
				{
					"name": "Delete JournalEntry",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({\r",
									"    key: 'Authorization',\r",
									"    value: 'Bearer ' + pm.environment.get('bearer_token')\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 204\", function () {\r",
									"  pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/journal/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"journal",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{createdJournalId}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/journal/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"journal",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{createdJournalId}}",
											"description": "(Required) "
										}
									]
								}
							},
							"_postman_previewlanguage": "",
							"header": "",
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Delete Patient",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({\r",
									"    key: 'Authorization',\r",
									"    value: 'Bearer ' + pm.environment.get('bearer_token')\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 204\", function () {\r",
									"  pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/patient/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"patient",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{createdPatientId}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/patient/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"patient",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "CfDJ8FKz02TG-BlPmak4vAezZpEc-EoGOXHGX8EgnTOH6KhBPU0d2gR3S2o2WnCial5QGhuveVdHTQSFlSGLe8-PyppT_daa-LnORFUqLmj8nlurC4tUsep3xTR3wq5HmJGFgW1aw8JxU1YJfXBs8l4ibHFhD3RZj-5q5VCC-_ZvZAWBP0KhfzY3p18ITpBW_xZpmROZVzkpnL7lg4GVvFkh3bwp8RlJ9NzLRy4jq24BAdZRtJbsA_T7dIwtuBthMYSLpUjsMy4txFjoA8t1KN4PBDy-I0HEehYvA88a3ixKGM-97U-gEMlTsX643pc9Lw-96U-eFaTK_7g9agv5BBvOrvjiHtojFnSgJosvIY1BOEXlkUER3ia_czfqBxFqiyiyUo0jh9H4qpmybHnnEBiURXCU7BQzwTkSZ3uaFk5F-OHAuNK5etdojXQFeqjoxUGGvMSfuXgtcIJ2VUO4A7dbK3MGWXBXpvFptNOxCogDCcJPflmQX8REtf6U75I3xxf3RAcekSiXkNveg8Bd3-sN6gQLsayk86Lfkr_-ClqtM9IJBbI8K6gX2JLp4GbRR6HyJrfhc-rzE8gMIWQ31vqvKntBBKk6vwOZrbIPAAgS9lwcRcuMhhcWqrsK1FH5-dhR91WT-YGP0sDe4e0koleD0vdB689UISJf-XynildapN9QQ-KYGAYD2mcT3fj7SkUVWA",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "",
			"type": "default"
		},
		{
			"key": "currentGuardianId",
			"value": "",
			"type": "string"
		},
		{
			"key": "currentTreatmentId",
			"value": "7bc92028-da56-4142-bd46-34a0d75b7d3e",
			"type": "string"
		},
		{
			"key": "createdPatientId",
			"value": "",
			"type": "string"
		}
	]
}