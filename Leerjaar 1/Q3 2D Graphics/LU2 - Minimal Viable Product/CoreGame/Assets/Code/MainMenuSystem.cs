using TMPro;
using System;
using UnityEngine;
using UnityEngine.UI;
using System.Threading.Tasks;
using System.Collections.Generic;
using UnityEngine.SceneManagement;

// TODO refactor class to use the show error message for all errors!

public class MainMenuSystem : MonoBehaviour
{
    [Header("UI References")]
    public TMP_Text UserMessage;
    public TMP_InputField InputEnvName;
    public TMP_InputField InputEnvMaxHeight;
    public TMP_InputField InputEnvMaxLength;
    [SerializeField] private Transform ScrollVieuw;
    [SerializeField] private GameObject ScrollVieuwButtonPrefab;

    // Internal
    private Environment2DApiClient enviroment2DApiClient;
    private List<Environment2D> environmentList;

    private void Start()
    {
        // Fetch the API client references from the manager's singleton
        enviroment2DApiClient = ApiClientManager.Instance.Environment2DApiClient;

        ReadEnvironments();
    }

    public void Quit()
    {
        Application.Quit();
    }

    private void ShowErrorMessage(string message)
    {
        UserMessage.color = Color.red;
        UserMessage.text = message;
        Debug.LogError(message);
    }

    private async Task RefreshEnvironmentsIfNeeded()
    {
        // Check if the local list is outdated (e.g., last update was a while ago)
        IWebRequestReponse webRequestResponse = await enviroment2DApiClient.ReadEnvironment2Ds();

        if (webRequestResponse is WebRequestData<List<Environment2D>> dataResponse)
        {
            environmentList = dataResponse.Data;
        }
    }

    public void ShowEnvironments()
    {
        // Clear existing items.
        foreach (Transform child in ScrollVieuw)
        {
            Destroy(child.gameObject);
        }

        foreach (var item in environmentList)
        {
            // Instantiate a new button for each environment.
            GameObject buttonObj = Instantiate(ScrollVieuwButtonPrefab, ScrollVieuw);
            Button button = buttonObj.GetComponent<Button>();

            // Set the button's text to the environment name.
            TextMeshProUGUI buttonText = buttonObj.GetComponentInChildren<TextMeshProUGUI>();
            if (buttonText != null)
            {
                buttonText.text = item.name;
            }

            string environmentId = item.id; // Use a local copy of the environment ID for the listener (to avoid closure issues).

            // Set the button's event listener to call methode with environmentId embedded.
            button.onClick.AddListener(() => {
                LoadEnvironment(environmentId);
            });
        }
    }

    public async void CreateEnvironment2D()
    {
        var newEnvironement = new Environment2D
        {
            // Generated by Server
            id = string.Empty,

            // Get values from the input fields
            name = InputEnvName.text,
            maxHeight = Convert.ToInt32(InputEnvMaxHeight.text),
            maxLength = Convert.ToInt32(InputEnvMaxLength.text),

        };

        IWebRequestReponse webRequestResponse = await enviroment2DApiClient.CreateEnvironment(newEnvironement);

        switch (webRequestResponse)
        {
            case WebRequestData<Environment2D> dataResponse:
                newEnvironement.id = dataResponse.Data.id;
                UserMessage.color = Color.green;
                UserMessage.text = "Environment created succesfully!";
                LoadEnvironment(newEnvironement.id);
                break;
            case WebRequestError errorResponse:
                string errorMessage = errorResponse.ErrorMessage;
                Debug.Log("Create environment2D error: " + errorMessage);
                UserMessage.color = Color.green;
                UserMessage.text = errorMessage;
                break;
            default:
                throw new NotImplementedException("No implementation for webRequestResponse of class: " + webRequestResponse.GetType());
        }
    }

    public async void ReadEnvironments()
    {
        IWebRequestReponse webRequestResponse = await enviroment2DApiClient.ReadEnvironment2Ds();

        switch (webRequestResponse)
        {
            case WebRequestData<List<Environment2D>> dataResponse:
                {
                    environmentList = dataResponse.Data;
                        ShowEnvironments();
                    break;
                }
            case WebRequestError errorResponse:
                {
                    string errorMessage = errorResponse.ErrorMessage;
                    UserMessage.color = Color.red;
                    UserMessage.text = errorMessage;
                    break;
                }
            default:
                {
                    throw new NotImplementedException("No implementation for webRequestResponse of class: " + webRequestResponse.GetType());
                }
        }
    }

    public async void LoadEnvironment(string environmentId)
    {
        await RefreshEnvironmentsIfNeeded();

        // Find the selected environment from the list
        var loadedEnvironment = environmentList.Find(env => env.id == environmentId);

        if (loadedEnvironment == null)
        {
            ShowErrorMessage($"Environment with ID {environmentId} not found!");
            ShowEnvironments();
            return;
        }

        GameManager.Instance.SelectedEnvironment = loadedEnvironment;
        SceneManager.LoadScene("Environment");
    }

    //public async void DeleteEnvironments()
    //{
    //    IWebRequestReponse webRequestResponse = await enviroment2DApiClient.DeleteEnvironment(loadedEnvironment.id);

    //    switch (webRequestResponse)
    //    {
    //        case WebRequestData<string> dataResponse:
    //            string responseData = dataResponse.Data;
    //            // TODO: Handle succes scenario.
    //            break;
    //        case WebRequestError errorResponse:
    //            string errorMessage = errorResponse.ErrorMessage;
    //            Debug.Log("Delete environment error: " + errorMessage);
    //            // TODO: Handle error scenario. Show the errormessage to the user.
    //            break;
    //        default:
    //            throw new NotImplementedException("No implementation for webRequestResponse of class: " + webRequestResponse.GetType());
    //    }
    //}
}