using TMPro;
using System;
using UnityEngine;
using UnityEngine.UI;
using System.Threading.Tasks;
using System.Collections.Generic;
using UnityEngine.SceneManagement;

// TODO refactor class to use the show error message for all errors!

public class MainMenuSystem : MonoBehaviour
{
    [Header("UI References")]
    public TMP_Text UserMessage;
    public TMP_InputField InputEnvName;
    public TMP_InputField InputEnvMaxHeight;
    public TMP_InputField InputEnvMaxLength;
    public Transform environmentListContainer;

    [Header("Prefabs")]
    public GameObject environmentButtonPrefab;
    public GameObject deleteButtonPrefab;


    // Internal
    private Environment2DApiClient enviroment2DApiClient;
    private List<Environment2D> environments;

    private void Start()
    {
        // Fetch the API client references from the manager's singleton
        enviroment2DApiClient = ApiClientManager.Instance.Environment2DApiClient;

        ReadEnvironments();
    }

    public void Quit()
    {
        Application.Quit();
    }

    private void ShowErrorMessage(string message)
    {
        UserMessage.color = Color.red;
        UserMessage.text = message;
        Debug.LogError(message);
    }

    private void ShowSuccessMessage(string message)
    {
        UserMessage.color = Color.green;
        UserMessage.text = message;
        Debug.Log(message);
    }

    private async Task RefreshEnvironmentsIfNeeded()
    {
        // Check if the local list is outdated (e.g., last update was a while ago)
        IWebRequestReponse webRequestResponse = await enviroment2DApiClient.ReadEnvironment2Ds();

        if (webRequestResponse is WebRequestData<List<Environment2D>> dataResponse)
        {
            environments = dataResponse.Data;
        }
    }

    public void DisplayEnvironments()
    {
        // Clear existing items.
        foreach (Transform child in environmentListContainer)
        {
            Destroy(child.gameObject);
        }

        foreach (var item in environments)
        {
            // Instantiate a new button for each environment.
            GameObject environmentButtonObj = Instantiate(environmentButtonPrefab, environmentListContainer);
            Button button = environmentButtonObj.GetComponent<Button>();

            // Set the button's text to the environment name.
            TextMeshProUGUI buttonText = environmentButtonObj.GetComponentInChildren<TextMeshProUGUI>();
            if (buttonText != null)
            {
                buttonText.text = item.name;
            }

            string environmentId = item.id; // Use local copy

            // Set the button's event listener to call method with environmentId embedded.
            button.onClick.AddListener(() => {
                LoadEnvironment(environmentId);
            });

            // Instantiate the delete button inside the environment button.
            GameObject deleteButtonObj = Instantiate(deleteButtonPrefab, environmentButtonObj.transform);

            // Set up the delete button's listener to delete the environment.
            Button deleteButton = deleteButtonObj.GetComponent<Button>();
            deleteButton.onClick.AddListener(() => {
                DeleteEnvironment(environmentId);
            });
        }
    }

    public async void CreateEnvironment2D()
    {
        var newEnvironement = new Environment2D
        {
            // Generated by Server
            id = string.Empty,

            // Get values from the input fields
            name = InputEnvName.text,
            maxHeight = Convert.ToInt32(InputEnvMaxHeight.text),
            maxLength = Convert.ToInt32(InputEnvMaxLength.text),

        };

        IWebRequestReponse webRequestResponse = await enviroment2DApiClient.CreateEnvironment(newEnvironement);

        switch (webRequestResponse)
        {
            case WebRequestData<Environment2D> dataResponse:
                newEnvironement.id = dataResponse.Data.id;
                UserMessage.color = Color.green;
                UserMessage.text = "Environment created succesfully!";
                LoadEnvironment(newEnvironement.id);
                break;
            case WebRequestError errorResponse:
                ShowErrorMessage(errorResponse.ErrorMessage);
                break;
            default:
                throw new NotImplementedException("No implementation for webRequestResponse of class: " + webRequestResponse.GetType());
        }
    }

    public async void ReadEnvironments()
    {
        IWebRequestReponse webRequestResponse = await enviroment2DApiClient.ReadEnvironment2Ds();

        switch (webRequestResponse)
        {
            case WebRequestData<List<Environment2D>> dataResponse:
                {
                    environments = dataResponse.Data;
                        DisplayEnvironments();
                    break;
                }
            case WebRequestError errorResponse:
                {
                    ShowErrorMessage(errorResponse.ErrorMessage);
                    break;
                }
            default:
                {
                    throw new NotImplementedException("No implementation for webRequestResponse of class: " + webRequestResponse.GetType());
                }
        }
    }

    public async void LoadEnvironment(string environmentId)
    {
        await RefreshEnvironmentsIfNeeded();

        // Find the selected environment from the list
        var loadedEnvironment = environments.Find(env => env.id == environmentId);

        if (loadedEnvironment == null)
        {
            ShowErrorMessage($"Environment with ID {environmentId} not found!");
            DisplayEnvironments();
            return;
        }

        GameManager.Instance.SelectedEnvironment = loadedEnvironment;
        SceneManager.LoadScene("Environment");
    }

    public async void DeleteEnvironment(string environmentId)
    {
        IWebRequestReponse webRequestResponse = await enviroment2DApiClient.DeleteEnvironment(environmentId);

        switch (webRequestResponse)
        {
            case WebRequestData<string>:
                ShowSuccessMessage("Succesfully deleted environment!");
                await RefreshEnvironmentsIfNeeded();
                DisplayEnvironments();
                break;
            case WebRequestError errorResponse:
                ShowErrorMessage(errorResponse.ErrorMessage);
                break;
            default:
                throw new NotImplementedException("No implementation for webRequestResponse of class: " + webRequestResponse.GetType());
        }
    }
}