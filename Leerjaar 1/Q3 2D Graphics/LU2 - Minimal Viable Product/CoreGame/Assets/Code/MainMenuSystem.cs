using TMPro;
using System;
using UnityEngine;
using UnityEngine.UI;
using System.Collections.Generic;
using UnityEngine.SceneManagement;
using System.Linq;
using NUnit.Framework;

public class MainMenuSystem : MonoBehaviour
{
    [Header("UI References")]
    public Canvas canvas;
    public TMP_Text UserMessage;
    public TMP_InputField envName;
    public TMP_InputField envMaxHeight;
    public TMP_InputField envMaxLength;
    public UnityEngine.UIElements.ScrollView loadEnvironment;
    [SerializeField] private Transform contentPanel;
    [SerializeField] private GameObject environmentButtonPrefab;

    // Internal
    private Environment2DApiClient enviroment2DApiClient;
    private List<Environment2D> environmentList;

    private void Start()
    {
        // Fetch the API client references from the manager's singleton
        enviroment2DApiClient = ApiClientManager.Instance.Environment2DApiClient;

        ReadEnvironments();
    }

    public void ShowEnvironments()
    {
        // Clear existing items.
        foreach (Transform child in contentPanel)
        {
            Destroy(child.gameObject);
        }

        foreach (var item in environmentList)
        {
            // Instantiate a new button for each environment.
            GameObject buttonObj = Instantiate(environmentButtonPrefab, contentPanel);
            Button button = buttonObj.GetComponent<Button>();

            // Set the button's text to the environment name.
            TextMeshProUGUI buttonText = buttonObj.GetComponentInChildren<TextMeshProUGUI>();
            if (buttonText != null)
            {
                buttonText.text = item.name;
            }

            string environmentId = item.id; // Use a local copy of the environment ID for the listener (to avoid closure issues).

            // Set the button's event listener to call methode with environmentId embedded.
            button.onClick.AddListener(() => {
                LoadEnvironment(environmentId);
            });
        }
    }

    public async void CreateEnvironment2D()
    {
        var newEnvironement = new Environment2D
        {
            // Generated by Server
            id = string.Empty,

            // Get values from the input fields
            name = envName.text,
            maxHeight = Convert.ToInt32(envMaxHeight.text),
            maxLength = Convert.ToInt32(envMaxLength.text),

        };

        IWebRequestReponse webRequestResponse = await enviroment2DApiClient.CreateEnvironment(newEnvironement);

        switch (webRequestResponse)
        {
            case WebRequestData<Environment2D> dataResponse:
                // TODO: Handle succes scenario.
                newEnvironement.id = dataResponse.Data.id;
                UserMessage.color = Color.green;
                UserMessage.text = "Environment created succesfully!";
                LoadEnvironment(newEnvironement.id);

                break;
            case WebRequestError errorResponse:
                // TODO: Handle error scenario. Show the errormessage to the user.
                string errorMessage = errorResponse.ErrorMessage;
                Debug.Log("Create environment2D error: " + errorMessage);
                UserMessage.color = Color.green;
                UserMessage.text = errorMessage;
                break;
            default:
                throw new NotImplementedException("No implementation for webRequestResponse of class: " + webRequestResponse.GetType());
        }
    }

    public async void ReadEnvironments()
    {
        IWebRequestReponse webRequestResponse = await enviroment2DApiClient.ReadEnvironment2Ds();

        switch (webRequestResponse)
        {
            case WebRequestData<List<Environment2D>> dataResponse:
                {
                    environmentList = dataResponse.Data;
                    // TODO: Handle succes scenario.
                        ShowEnvironments();
                    break;
                }
            case WebRequestError errorResponse:
                {
                    string errorMessage = errorResponse.ErrorMessage;
                    // TODO: Handle error scenario. Show the errormessage to the user.
                    UserMessage.color = Color.red;
                    UserMessage.text = errorMessage;
                    break;
                }
            default:
                {
                    throw new NotImplementedException("No implementation for webRequestResponse of class: " + webRequestResponse.GetType());
                }
        }
    }

    public void LoadEnvironment(string environmentId)
    {
        // Find the selected environment from the list
        Environment2D loadedEnvironment = environmentList.Find(env => env.id == environmentId);

        if (loadedEnvironment != null)
        {
            GameManager.Instance.SelectedEnvironment = loadedEnvironment;
            SceneManager.LoadScene("Environment");
        }
        else
        {
            Debug.LogError($"Environment with ID {environmentId} not found!");
        }
    }

    //public async void DeleteEnvironments()
    //{
    //    IWebRequestReponse webRequestResponse = await enviroment2DApiClient.DeleteEnvironment(loadedEnvironment.id);

    //    switch (webRequestResponse)
    //    {
    //        case WebRequestData<string> dataResponse:
    //            string responseData = dataResponse.Data;
    //            // TODO: Handle succes scenario.
    //            break;
    //        case WebRequestError errorResponse:
    //            string errorMessage = errorResponse.ErrorMessage;
    //            Debug.Log("Delete environment error: " + errorMessage);
    //            // TODO: Handle error scenario. Show the errormessage to the user.
    //            break;
    //        default:
    //            throw new NotImplementedException("No implementation for webRequestResponse of class: " + webRequestResponse.GetType());
    //    }
    //}
}