@page "/"
@rendermode InteractiveServer
@inject SimpleMqtt.SimpleMqttClient MQttClient
@inject IMqttProcessingService MqttService
@inject IDatabaseAccess DatabaseAccess
@inject IJSRuntime JS

<PageTitle>Robot Data</PageTitle>

<style>
  body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    background: linear-gradient(135deg, #f0f4f8, #d9e7ff);
    margin: 0;
    padding: 20px;
    color: #333;
  }

  .dashboard-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 15px;
    background: #fff;
    border-radius: 8px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    margin-bottom: 20px;
  }

  .MainHeader {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    text-align: center;
  }

  .dashboard-header h1 {
    font-size: 1.8rem;
    margin: 0;
    color: #007bff;
  }

  .status-indicators {
    display: flex;
    align-items: center;
    gap: 15px;
  }

  .status {
    padding: 8px 12px;
    color: #fff;
    border-radius: 5px;
    font-weight: bold;
  }

  .auto-refresh-toggle {
    display: flex;
    align-items: center;
    gap: 10px;
  }

  .auto-refresh-toggle .form-check-input {
    width: 50px;
    height: 25px;
    background-color: #e9ecef;
    border: none;
    border-radius: 25px;
    position: relative;
    transition: background-color 0.3s ease, box-shadow 0.3s ease;
    cursor: pointer;
  }

  .auto-refresh-toggle .form-check-input:checked {
    background-color: #0d6efd;
  }

  .auto-refresh-toggle .form-check-input:before {
    content: '';
    position: absolute;
    width: 20px;
    height: 20px;
    background-color: #fff;
    border-radius: 50%;
    top: 2.5px;
    left: 3px;
    transition: transform 0.3s ease;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
  }

  .auto-refresh-toggle .form-check-input:checked:before {
    transform: translateX(25px);
  }

  .auto-refresh-toggle .form-check-label {
    font-size: 14px;
    font-weight: 600;
    color: #212529;
    margin: 0;
  }

  .grid-container {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 20px;
  }

  /* General Card Styling */
  .card {
    background-color: #f8f9fa;
    border: 1px solid #dee2e6;
    border-radius: 8px;
    padding: 20px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
  }

  .card:hover {
    transform: translateY(-5px);
    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
  }

  /* Form Labels */
  .card .form-label {
    font-weight: 600;
    color: #343a40;
  }

  /* Input Fields */
  .card .form-control {
    border: 1px solid #ced4da;
    border-radius: 6px;
    padding: 10px;
    font-size: 14px;
    transition: border-color 0.3s ease, box-shadow 0.3s ease;
  }

  .card .form-control:focus {
    border-color: #0d6efd;
    box-shadow: 0 0 4px rgba(13, 110, 253, 0.5);
  }

  /* Toggle Switch */
  .card .form-check-input {
    width: 50px;
    height: 25px;
    background-color: #e9ecef;
    border: none;
    border-radius: 25px;
    position: relative;
    transition: background-color 0.3s ease;
    cursor: pointer;
  }

  .card .form-check-input:checked {
    background-color: #0d6efd;
  }

  .card .form-check-input:before {
    content: '';
    position: absolute;
    width: 20px;
    height: 20px;
    background-color: #fff;
    border-radius: 50%;
    top: 2.5px;
    left: 3px;
    transition: transform 0.3s ease;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
  }

  .card .form-check-input:checked:before {
    transform: translateX(25px);
  }

  /* Additional Spacing and Alignment */
  .card .form-group {
    margin-bottom: 1.5rem;
  }

  .card .form-group.d-flex {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  /* Card Title Styling */
  .card h3 {
    font-size: 1.5rem;
    font-weight: 700;
    color: #212529;
    margin-bottom: 1rem;
  }

  /* Card Description */
  .card p {
    color: #6c757d;
    font-size: 14px;
    margin-bottom: 1rem;
  }

  .btn-primary {
    background: #007bff;
    border: none;
    transition: background 0.3s;
  }

  .btn-primary:hover {
    background: #0056b3;
  }

  .btn-dangerous {
    background: #dc3545;
    border: none;
    transition: background 0.3s;
  }

  .btn-dangerous:hover {
    background: #a71d2a;
  }

  .command-table-container,
  .sensor-table-container {
    overflow-x: auto;
    overflow-y: auto;
    max-height: auto;
  }

  .table {
    margin-top: 15px;
  }

  .pixel-container {
    display: grid;
    grid-template-columns: repeat(1, 1fr);
    justify-items: center;
    gap: 10px;
    margin-top: 1rem;
  }

  .pixel {
    width: 50px;
    height: 50px;
    display: flex;
    justify-content: center;
    align-items: center;
    border-radius: 8px;
    color: #fff;
    font-weight: bold;
  }

  .modal-header {
    background: #007bff;
    color: #fff;
  }

  .errorMessage {
    font-size: 1.2rem;
  }
</style>

<div class="dashboard-header">
  <div class="MainHeader">
    <h1>FarmView Dashboard</h1>
    <p>Copyright 2025 - Daniël van Ginneken</p>
  </div>
  <div class="status-indicators">
    <div class="form-check form-switch auto-refresh-toggle">
      <input type="checkbox" id="autoRefreshToggle" class="form-check-input" @bind-value="autoRefreshEnabled"
        @bind-value:event="oninput" @onchange="OnAutoRefreshChanged">
      <label class="form-check-label" for="autoRefreshToggle">Auto Refresh</label>
    </div>
    <input type="date" class="form-control" id="dateSelect" @bind-value="_selectedDate" @bind-value:event="oninput"
      @onchange="@(() => UpdateData())">
    <span class="status" style="background-color: @(MqttService.robotStatus == "Active" ? "#28a745" : "#dc3545")">
      Status: <strong>@MqttService.robotStatus</strong>
    </span>
    <span class="status" style="background-color: @(MqttService.robotBattery <= 25 ? "#dc3545" : "#28a745")">
      Battery: <strong>@MqttService.robotBattery%</strong>
    </span>
  </div>
</div>

<div class="grid-container">
  <!-- Commands Card -->
  <div class="card">
    <h3>Commands</h3>
    <p>Control the robot from the application.</p>
    <div class="commandButton mb-3">
      <button class="btn btn-primary" @onclick="@(() => MqttSendCommand("Start"))">Start</button>
      <button class="btn btn-primary" @onclick="@(() => MqttSendCommand("Stop"))">Stop</button>
      <button class="btn btn-dangerous" @onclick="@(() => MqttSendCommand("Emergency Stop"))">Emergency Stop</button>
    </div>
    <h4>Command History</h4>
    <div class="command-table-container">
      <table class="table table-striped table-hover">
        <thead>
          <tr>
            <th>Command</th>
            <th>TimeStamp</th>
          </tr>
        </thead>
        <tbody>
          @foreach (var item in commandHistory)
          {
            <tr>
              <td>@item.CommandData</td>
              <td>@item.DataTimestamp</td>
            </tr>
          }
        </tbody>
      </table>
    </div>
  </div>

  <!-- Plant Health Card -->
  <div class="card" id="pixelCard">
    <h3>Plant Health</h3>
    <div class="pixel-container">
      @for (int i = 9; i >= 1; i--)
      {
        <div id="pixel@i" class="pixel" style="background-color: @pixelColors[i-1];">
          @i
        </div>
      }
    </div>
  </div>

  <!-- Sensor Insights Card -->
  <div class="card">
    <h3>Robot Insights</h3>
    <p>Quick overview of robot data.</p>
    <div class="sensor-table-container">
      <table class="table table-striped table-hover">
        <thead>
          <tr>
            <th>Name</th>
            <th>Data</th>
            <th>TimeStamp</th>
          </tr>
        </thead>
        <tbody>
          @foreach (var item in sensorHistory)
          {
            <tr>
              <td>@item.SensorName</td>
              <td>@item.SensorData</td>
              <td>@item.DataTimestamp</td>
            </tr>
          }
        </tbody>
      </table>
    </div>
  </div>

  <!-- Settings Card -->
  <div class="card">
    <h3 class="mb-3">Settings</h3>
    <p class="mb-4">Customize robot configurations and data.</p>
    <div class="form-group mb-4">
      <label for="colorSensorGain" class="form-label">Color Sensor Gain</label>
      <input type="text" id="colorSensorGain" placeholder="Enter gain value" @bind-value="robotColourGain"
        @bind-value:event="oninput" @onchange="@(() => MqttSendSettings(robotColourGain, "ColorGain"))"
        class="form-control">
    </div>
    <div class="form-group d-flex align-items-center justify-content-between">
      <label for="motorsEnabled" class="form-label mb-0">Motors Enabled</label>
      <div class="form-check form-switch">
        <input type="checkbox" id="motorsEnabled" class="form-check-input" @bind-value="robotMotorsEnabled"
          @bind-value:event="oninput"
          @onchange="@(() => MqttSendSettings(robotMotorsEnabled.ToString(), "MotorsEnabled"))">
        <label class="form-check-label" for="motorsEnabled"></label>
      </div>
    </div>
    <div class="form-group">
      <button class="btn btn-primary mt-4" @onclick="@(() => MqttRequestData("all"))">Request Data</button>
    </div>
  </div>
</div>

<div class="modal fade" id="errorModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="exampleModalLabel">Error</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <p class="errorMessage">@errorMessage</p>
      </div>
    </div>
  </div>
</div>

@code {
  private string[] pixelColors = Enumerable.Repeat("#555555", 9).ToArray();
  private CancellationTokenSource? refreshCancellationTokenSource;
  private List<Command> commandHistory = new List<Command>();
  private List<Sensor> sensorHistory = new List<Sensor>();
  private DateTime _selectedDate = DateTime.Today;
  private string robotColourGain = string.Empty;
  private string errorMessage = string.Empty;
  private bool robotMotorsEnabled = default;
  private bool autoRefreshEnabled = false;
  private bool firstRender = true;

  protected override async Task OnInitializedAsync()
  {
    await UpdateData();
    StopAutoRefresh();
  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
    {
      this.firstRender = false;

      if (!string.IsNullOrEmpty(errorMessage))
      {
        StateHasChanged();
        await JS.InvokeVoidAsync("showErrorModal");
      }
    }
  }

  private async Task UpdateData()
  {
    await GetPixelHistory();
    await GetSensorHistory();
    await GetCommandHistory();

    MqttRequestData("all");

    robotMotorsEnabled = MqttService.robotMotorsEnabled;
    robotColourGain = MqttService.robotColourSensorGain;
  }

  private void SetErrorMessage(string message)
  {
    errorMessage = message;
    Console.WriteLine(message);
    StateHasChanged();
  }

  private async Task GetPixelHistory()
  {
    try
    {
      var result = await Task.Run(() => DatabaseAccess.ReadPixelData(_selectedDate));

      foreach (var item in result)
      {
        int index = item.PixelNumber - 1;

        if (index < 0 || index >= pixelColors.Length)
        {
          Console.WriteLine($"Invalid index: {index}. Valid range: 0 to {pixelColors.Length - 1}");
          return;
        }

        pixelColors[index] = item.PixelData switch
        {
          "Green" => "#28a745",
          "Yellow" => "#ffc107",
          "Red" => "#dc3545",
          _ => "#555555"
        };
      }
    }
    catch (Exception ex)
    {
      SetErrorMessage($"Error: {ex.Message}");
    }
  }

  private async Task GetCommandHistory()
  {
    try
    {
      var commandResult = await Task.Run(() => DatabaseAccess.ReadCommandData(_selectedDate));

      foreach (var item in commandResult)
      {
        commandHistory.Add(item);
      }
    }
    catch (Exception ex)
    {
      SetErrorMessage($"Error: {ex.Message}");
    }
  }

  private async Task GetSensorHistory()
  {
    try
    {
      var sensorResult = await Task.Run(() => DatabaseAccess.ReadSensorData(_selectedDate));

      foreach (var item in sensorResult)
      {
        sensorHistory.Add(item);
      }
    }
    catch (Exception ex)
    {
      SetErrorMessage($"Error: {ex.Message}");
    }
  }

  private void MqttSendCommand(string command)
  {
    MQttClient.PublishMessage(command, "CropBotics/command");
  }

  private void MqttSendSettings(string value, string setting)
  {
    MQttClient.PublishMessage(value, $"CropBotics/settings/{setting}");
  }

  private void MqttRequestData(string data)
  {
    MQttClient.PublishMessage(data, $"CropBotics/request");
  }

  private void OnAutoRefreshChanged()
  {
    if (autoRefreshEnabled)
    {
      _ = StartAutoRefresh(); // Fire and forget
      Console.WriteLine("DEBUG: Auto refresh started");
    }
    else
    {
      StopAutoRefresh();
      Console.WriteLine("DEBUG: Auto refresh stopped");

    }
  }

  private async Task StartAutoRefresh()
  {
    refreshCancellationTokenSource?.Cancel();
    refreshCancellationTokenSource = new CancellationTokenSource();

    try
    {
      while (!refreshCancellationTokenSource.Token.IsCancellationRequested)
      {
        await UpdateData();
        await Task.Delay(10000, refreshCancellationTokenSource.Token);
        Console.WriteLine("DEBUG: Auto refresh tick");
      }
    }
    catch (TaskCanceledException)
    {
      // Expected when the token is canceled
    }
  }

  private void StopAutoRefresh()
  {
    refreshCancellationTokenSource?.Cancel();
    refreshCancellationTokenSource = null;
  }

}