@page "/"
@rendermode InteractiveServer
@inject SimpleMqtt.SimpleMqttClient MQttClient
@inject IMqttProcessingService MqttService
@inject IDatabaseAccess DatabaseAccess
@inject IJSRuntime JS

<PageTitle>Robot Data</PageTitle>

<div class="dashboard-header">
  <div class="MainHeader">
    <h1>FarmView Dashboard</h1>
    <p>Copyright 2025 - Daniël van Ginneken</p>
  </div>
  <div class="status-indicators">
    <div class="form-check form-switch auto-refresh-toggle">
      <input type="checkbox" id="autoRefreshToggle" class="form-check-input" @bind-value="autoRefreshEnabled"
        @bind-value:event="oninput" @onchange="OnAutoRefreshChanged">
      <label class="form-check-label" for="autoRefreshToggle">Auto Refresh</label>
    </div>
    <input type="date" class="form-control" id="dateSelect" @bind-value="_selectedDate" @bind-value:event="oninput"
      @onchange="@(() => UpdateData())">
    <span class="status" style="background-color: @(robotStatus == "Online" ? "#28a745" : "#dc3545")">
      Status: <strong>@robotStatus</strong>
    </span>
    <span class="status" style="background-color: @(Convert.ToInt32(robotBattery) <= 25 ? "#dc3545" : "#28a745")">
      Battery: <strong>@robotBattery%</strong>
    </span>
  </div>
</div>

<div class="grid-container">
  <!-- Commands Card -->
  <div class="card">
    <h3>Commands</h3>
    <p>Control the robot from the application.</p>
    @if (robotStatus == "Online")
    {
      <div class="commandButton mb-3">
        <button class="btn btn-primary" @onclick="@(() => MqttSendCommand("forward"))">Start</button>
        <button class="btn btn-primary" @onclick="@(() => MqttSendCommand("backward"))">Return</button>
        <button class="btn btn-primary" @onclick="@(() => MqttSendCommand("Stop"))">Stop</button>
        <button class="btn btn-dangerous" @onclick="@(() => MqttSendCommand("emergency_stop"))">Emergency Stop</button>
      </div>
    }
    else
    {
      <div class="d-flex flex-column justify-content-center align-items-center" style="height: 100px;">
        <p>Robot is currently offline.</p>
      </div>
    }
    <hr>
    <h4>Command History</h4>
    <div class="command-table-container">
      <table class="table table-striped table-hover">
        <thead>
          <tr>
            <th>Command</th>
            <th>TimeStamp</th>
          </tr>
        </thead>
        <tbody>
          @foreach (var item in commandHistory)
          {
            <tr>
              <td>@item.CommandData</td>
              <td>@item.DataTimestamp</td>
            </tr>
          }
        </tbody>
      </table>
    </div>
  </div>

  <!-- Plant Health Card -->
  <div class="card" id="pixelCard">
    <h3>Plant Health</h3>
    <div class="pixel-container">
      @foreach (var (color, index) in pixelColors.Select((color, index) => (color, index + 1)))
      {
        <div id="pixel@(index)" class="pixel" style="background-color: @(color);">
          @index
        </div>
      }
    </div>
  </div>

  <!-- Sensor Insights Card -->
  <div class="card">
    <h3>Robot Insights</h3>
    <p>Quick overview of robot data.</p>
    <div class="sensor-data">
      @if (robotStatus == "Online")
      {
        <p>Obstacle Distance: <strong>@obstacleDistance</strong> cm
        </p>
        <p>Pixel Distance: <strong>@pixelDistance</strong> px</p>
        <p>Motors: <strong>@(rMotorsEnabled ? "Enabled" : "Disabled")</strong></p>
        <p>Emergency Stop:
          <strong style="color: @(robotEmergencyStop ? "#dc3545" : "#28a745")">
            @(robotEmergencyStop ? "Active" : "Inactive")
          </strong>
        </p>
      }
      else
      {
        <div class="d-flex flex-column justify-content-center align-items-center" style="height: 100px;">
          <p>Robot is currently offline.</p>
        </div>
      }
    </div>
    <hr>
    <div class="sensor-table-container">
      <table class="table table-striped table-hover">
        <thead>
          <tr>
            <th>Name</th>
            <th>Data</th>
            <th>TimeStamp</th>
          </tr>
        </thead>
        <tbody>
          @foreach (var item in sensorHistory)
          {
            <tr>
              <td>@item.SensorName</td>
              <td>@item.SensorData</td>
              <td>@item.DataTimestamp</td>
            </tr>
          }
        </tbody>
      </table>
    </div>
  </div>

  <!-- Settings Card -->
  <div class="card">
    <h3 class="mb-3">Settings</h3>
    <p class="mb-4">Customize robot configurations and data.</p>
    @if (robotStatus == "Online")
    {
      <div class="form-group MotorCalibration">
        <div class="mb-3">
          <label for="MotorCalibrationLeft" class="form-label">Calibration Left</label>
          <input type="number" class="form-control" id="MotorCalibrationLeft" min="-25" max="25">
        </div>
        <div class="mb-3">
          <label for="MotorCalibrationRight" class="form-label">Calibration Right</label>
          <input type="number" class="form-control" id="MotorCalibrationRight" min="-25" max="25">
        </div>
      </div>
      <div class="form-group mb-4">
        <label for="colorSensorGain" class="form-label">Color Sensor Gain</label>
        <select id="colorSensorGain" class="form-control" @bind-value="robotColourSensorGain" @bind-value:event="oninput"
          @onchange="@(() => MqttSendSettings(robotColourSensorGain, "ColorGain"))">
          <option value="1x">1x</option>
          <option value="4x">4x</option>
          <option value="16x">16x</option>
          <option value="60x">60x</option>
        </select>
      </div>
      <div class="form-group d-flex align-items-center justify-content-between">
        <label for="rMotorsEnabled" class="form-label mb-0">Motors Enabled</label>
        <div class="form-check form-switch">
          <input type="checkbox" id="rMotorsEnabled" class="form-check-input" @bind-value="rMotorsEnabled"
            @bind-value:event="oninput" @onchange="@(() => MqttSendSettings(rMotorsEnabled.ToString(), "MotorsEnabled"))">
          <label class="form-check-label" for="rMotorsEnabled"></label>
        </div>
      </div>
      <div class="form-group">
        <button class="btn btn-primary mt-4" @onclick="@(() => MqttRequestData("all"))">Request Data</button>
      </div>
    }
    else
    {
      <div class="d-flex flex-column justify-content-center align-items-center" style="height: 100px;">
        <p>Robot is currently offline.</p>
      </div>
    }
  </div>
</div>

<div class="modal fade" id="errorModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="exampleModalLabel">Error</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <p class="errorMessage">@errorMessage</p>
      </div>
    </div>
  </div>
</div>

@code {
  private string[] pixelColors = new string[0];
  private CancellationTokenSource? refreshCancellationTokenSource;
  private List<Command> commandHistory = new List<Command>();
  private List<Sensor> sensorHistory = new List<Sensor>();
  private DateTime _selectedDate = DateTime.Today;
  private string robotColourSensorGain = string.Empty;
  private string errorMessage = string.Empty;
  private string robotStatus = string.Empty;
  private string robotBattery = "0";
  private bool robotEmergencyStop = default;
  private bool autoRefreshEnabled = false;
  private bool rMotorsEnabled = default;
  private bool firstRender = true;
  private int obstacleDistance = 0;
  private int pixelDistance = 0;
  private short CalibrationLeft = 0;
  private short CalibrationRight = 0;

  protected override async Task OnInitializedAsync()
  {
    await UpdateData();
    StopAutoRefresh();
  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
    {
      this.firstRender = false;

      if (!string.IsNullOrEmpty(errorMessage))
      {
        StateHasChanged();
        await JS.InvokeVoidAsync("showErrorModal");
      }
    }
  }

  private async Task UpdateData()
  {
    await GetPixelHistory();
    await GetSensorHistory();
    await GetCommandHistory();
    await MqttRequestData("all");

    robotStatus = "Offline";
    robotBattery = "0";

    robotColourSensorGain = MqttService.robotColourSensorGain;
    robotEmergencyStop = MqttService.robotEmergencyStop;
    obstacleDistance = MqttService.obstacleDistance;
    rMotorsEnabled = MqttService.robotMotorsEnabled;
    CalibrationRight = MqttService.CalibrationRight;
    CalibrationLeft = MqttService.CalibrationLeft;
    pixelDistance = MqttService.pixelDistance;
    robotBattery = MqttService.robotBattery;
    robotStatus = MqttService.robotStatus;

    StateHasChanged();
  }

  private void SetErrorMessage(string message)
  {
    errorMessage = message;
    Console.WriteLine(message);
    StateHasChanged();
  }

  private async Task GetPixelHistory()
  {
    try
    {
      var result = await Task.Run(() => DatabaseAccess.ReadPixelData(_selectedDate));

      // Adjust the pixelColors array size based on the result count
      pixelColors = new string[result.Count];

      if (result.Count == 0)
      {
        return;
      }

      for (int i = 0; i < result.Count; i++)
      {
        var item = result[i];
        int index = item.PixelNumber - 1;

        if (index < 0 || index >= pixelColors.Length)
        {
          Console.WriteLine($"Invalid index: {index}. Valid range: 0 to {pixelColors.Length - 1}");
          continue;
        }

        pixelColors[index] = item.PixelData switch
        {
          "Green" => "#28a745",
          "Yellow" => "#ffc107",
          "Red" => "#dc3545",
          "Blue" => "#007bff",
          "Cyan" => "#17a2b8",
          "Magenta" => "#6610f2",
          "White" => "#f8f9fa",
          "Black" => "#343a40",
          "Unknown" => "#555555",
          _ => "#555555"
        };
      }
    }
    catch (Exception ex)
    {
      SetErrorMessage($"Error: {ex.Message}");
    }
  }

  private async Task GetCommandHistory()
  {
    try
    {
      var commandResult = await Task.Run(() => DatabaseAccess.ReadCommandData(_selectedDate));

      foreach (var item in commandResult)
      {
        commandHistory.Add(item);
      }
    }
    catch (Exception ex)
    {
      SetErrorMessage($"Error: {ex.Message}");
    }
  }

  private async Task GetSensorHistory()
  {
    try
    {
      var sensorResult = await Task.Run(() => DatabaseAccess.ReadSensorData(_selectedDate));

      foreach (var item in sensorResult)
      {
        sensorHistory.Add(item);
      }
    }
    catch (Exception ex)
    {
      SetErrorMessage($"Error: {ex.Message}");
    }
  }

  private async Task MqttRequestData(string data)
  {
    await MQttClient.PublishMessage(data, $"CropBotics/request");
  }

  private void MqttSendCommand(string command)
  {
    if (command == "Emergency Stop")
    {
      MQttClient.PublishMessage(command, "CropBotics/command");
    }
    else if (MqttService.robotEmergencyStop)
    {
      SetErrorMessage("Robot is in emergency stop mode. Please reset the robot to continue.");
    }
    else
    {
      MQttClient.PublishMessage(command, "CropBotics/command");
    }
  }

  private void MqttSendSettings(string value, string setting)
  {
    MQttClient.PublishMessage(value, $"CropBotics/settings/{setting}");
  }

  private void OnAutoRefreshChanged()
  {
    if (autoRefreshEnabled)
    {
      _ = StartAutoRefresh(); // Fire and forget
      Console.WriteLine("DEBUG: Auto refresh started");
    }
    else
    {
      StopAutoRefresh();
      Console.WriteLine("DEBUG: Auto refresh stopped");

    }
  }

  private async Task StartAutoRefresh()
  {
    refreshCancellationTokenSource?.Cancel();
    refreshCancellationTokenSource = new CancellationTokenSource();

    try
    {
      while (!refreshCancellationTokenSource.Token.IsCancellationRequested)
      {
        await UpdateData();
        await Task.Delay(10000, refreshCancellationTokenSource.Token);
        Console.WriteLine("DEBUG: Auto refresh tick");
      }
    }
    catch (TaskCanceledException)
    {
      // Expected when the token is canceled
    }
  }

  private void StopAutoRefresh()
  {
    refreshCancellationTokenSource?.Cancel();
    refreshCancellationTokenSource = null;
  }

}