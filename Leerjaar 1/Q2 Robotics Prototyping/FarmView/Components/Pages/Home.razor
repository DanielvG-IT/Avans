@page "/"
@rendermode InteractiveServer
@inject SimpleMqtt.SimpleMqttClient MQttClient
@inject IMqttProcessingService MqttService
@inject IDatabaseAccess DatabaseAccess
@inject IJSRuntime JS

<PageTitle>Robot Data</PageTitle>

<style>
  body {
    font-family: 'Poppins', sans-serif;
    background-color: #f8f9fa;
    color: #333;
    margin: 0;
    padding: 0;
  }

  /* General Improvements */
  :root {
    --primary-color: #007bff;
    --secondary-color: #6c757d;
    --background-color: #f8f9fa;
    --text-color: #333;
    --card-background: #fff;
    --button-hover: #0056b3;
    --danger-color: #dc3545;
  }

  .dashboard-container {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 20px;
    padding: 20px;
  }

  .card {
    background-color: var(--card-background);
    border-radius: 8px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    padding: 20px;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
  }

  .card:hover {
    transform: translateY(-5px) scale(1.02);
    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
  }

  h3 {
    margin-top: 0;
  }

  /* Accessibility */
  .btn {
    display: inline-block;
    padding: 10px 20px;
    font-size: 16px;
    using Microsoft.Data.SqlClient;
    using FarmView.Interfaces;
    font-weight: bold;
    text-align: center;
    color: #fff;
    background-color: var(--primary-color);
    border: none;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.3s ease;
  }

  .btn:hover {
    background-color: var(--button-hover);
  }

  .btn:focus {
    outline: 2px solid var(--primary-color);
    outline-offset: 2px;
  }

  .btn-dangerous {
    background-color: var(--danger-color);
    color: #fff;
    padding: 0.5rem 1rem;
    border: none;
    border-radius: 8px;
    font-size: 0.9rem;
    font-weight: bold;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    transition: all 0.2s ease-in-out;
  }

  .btn-dangerous:focus {
    outline: 2px solid var(--danger-color);
  }

  .btn-dangerous:hover {
    background-color: #c82333;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.2);
    transform: translateY(-1px);
  }

  .modal {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background-color: var(--card-background);
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    display: none;
  }

  .modal.show {
    display: block;
    animation: fadeIn 0.3s ease-out;
  }

  .grid-container {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 1.5rem;
    margin: 2rem;
    padding: 1rem;
  }

  .pixel-container {
    display: grid;
    grid-template-columns: repeat(1, 1fr);
    justify-items: center;
    gap: 10px;
    margin-top: 1rem;
  }

  .pixel {
    width: 60px;
    height: 60px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: bold;
    font-size: 1rem;
    border-radius: 8px;
    color: #fff;
    transition: transform 0.2s ease, box-shadow 0.2s ease;
  }

  .pixel:hover {
    transform: scale(1.1);
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.2);
  }

  .modal-header {
    background-color: #dc3545;
    color: #fff;
  }

  .btn-close {
    filter: invert(1);
  }

  .form-control {
    border-radius: 8px;
    padding: 0.5rem 1rem;
    font-size: 1rem;
  }

  .btn {
    background-color: #007bff;
    color: #fff;
    border: none;
    padding: 0.5rem 1.5rem;
    border-radius: 8px;
    font-size: 1rem;
    transition: background-color 0.2s ease;
  }

  .btn:hover {
    background-color: #0056b3;
  }

  .dashboard-header {
    background-color: #007bff;
    color: #fff;
    padding: 1rem 2rem;
    border-radius: 10px;
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 2rem;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    flex-wrap: wrap;
  }

  .dashboard-header h1 {
    font-size: 2rem;
    margin: 0;
  }

  .status-indicators {
    display: flex;
    align-items: center;
    gap: 1rem;
    flex-wrap: wrap;
    margin-top: 1rem;
  }

  .status {
    font-size: 1rem;
    color: #fff;
    background-color: rgba(255, 255, 255, 0.1);
    padding: 0.5rem 1rem;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    font-weight: bold;
  }

  .form-control {
    background-color: #fff;
    color: #333;
    font-size: 1rem;
    border: none;
    padding: 0.5rem;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    transition: box-shadow 0.2s ease;
  }

  .form-control:focus {
    outline: none;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.2);
  }

  .command-table-container {
    width: 50px;
    height: 50px;
    overflow: auto;
  }
</style>

<div class="dashboard-header">
  <h1>FarmView Dashboard</h1>
  <!-- <p>Gemaakt door Daniël van Ginneken</p> -->
  <div class="status-indicators">
    <span class="status"
      style="background-color: @(MqttService.robotStatus == "Active" ? "#28a745" : "#dc3545")">Status:
      <strong>@MqttService.robotStatus</strong>
    </span>
    <span style="background-color: @(MqttService.robotBattery <= 25 ? "#dc3545" : "#28a745")" class="status">Battery:
      <strong>@MqttService.robotBattery%</strong>
    </span>
    <input type="date" class="form-control" id="dateSelect" @bind-value="_selectedDate" @bind-value:event="oninput"
      @onchange="@(() => UpdateData())" />
  </div>
</div>

<div class="grid-container">
  <!-- Summary card -->
  <div class="card">
    <h3 class="mb-3">Summary</h3>
    <p>Quick overview of robot data and performance.</p>
    <div class="commandButton">
      <button class="btn btn-primary" @onclick="@(() => MqttSendCommand("Start"))">Start</button>
      <button class="btn btn-primary" @onclick="@(() => MqttSendCommand("Stop"))">Stop</button>
      <button class="btn btn-dangerous" @onclick="@(() => MqttSendCommand("Emergency Stop"))">Emergency Stop</button>
    </div>
    <div class="commandHistory">
      <h4>Command History</h4>
      <div class="command-table-container">
        <table class="table-responsive table table-striped table-hover ">
          <thead>
            <th>Command Data</th>
            <th>TimeStamp</th>
          </thead>
          <tbody>
            @foreach (var item in commandHistory)
            {
              <tr>
                <td>@item.CommandData</td>
                <td>@item.DataTimestamp</td>
              </tr>
            }
          </tbody>
        </table>
      </div>
    </div>
  </div>

  <!-- Plant health card -->
  <div class="card">
    <h3 class="mb-3">Plant health</h3>
    <div class="pixel-container">
      @for (int i = 9; i >= 1; i--)
      {
        <div id="pixel@i" class="pixel" style="background-color: @pixelColors[i-1];">
          @i
        </div>
      }
    </div>
  </div>

  <!-- Performance Insights card -->
  <div class="card">
    <h3 class="mb-3">Performance Insights</h3>
    <p>Visualize key performance indicators.</p>
    <div class="commandHistory">
      <h4>Sensor History</h4>
      <div class="sensor-table-container">
        <table class="table-responsive table table-striped table-hover">
          <thead>
            <th>Sensor Name</th>
            <th>Sensor Data</th>
            <th>TimeStamp</th>
          </thead>
          <tbody>
            @foreach (var item in sensorHistory)
            {
              <tr>
                <td>@item.SensorName</td>
                <td>@item.SensorData</td>
                <td>@item.DataTimestamp</td>
              </tr>
            }
          </tbody>
        </table>
      </div>
    </div>
  </div>

  <!-- Settings card -->
  <div class="card">
    <h3 class="mb-3">Settings</h3>
    <p>Customize robot configurations and data.</p>
    <input type="selector" placeholder="Colour Sensor Gain" @bind-value="robotMotorsEnabled" @bind-value:event="oninput"
      @onchange="@(()=> MqttSendSettings("", ""))">
    <input type="text" placeholder="Motors Enabled" @bind-value="robotColourGain" @bind-value:event="oninput"
      @onchange="@(()=> MqttSendSettings("", ""))">
  </div>
</div>

<div class="modal fade" id="errorModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="exampleModalLabel">Error</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <p class="errorMessage" style="color: red;">@errorMessage</p>
      </div>
    </div>
  </div>
</div>

@code {
  private string[] pixelColors = Enumerable.Repeat("#555555", 9).ToArray();
  private List<Command> commandHistory = new List<Command>();
  private List<Sensor> sensorHistory = new List<Sensor>();
  private DateTime _selectedDate = DateTime.Today;
  private string robotColourGain = string.Empty;
  private string errorMessage = string.Empty;
  private bool robotMotorsEnabled = default;
  private bool firstRender = true;

  protected override async Task OnInitializedAsync()
  {
    await UpdateData();
  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
    {
      this.firstRender = false;

      if (!string.IsNullOrEmpty(errorMessage))
      {
        StateHasChanged();
        await JS.InvokeVoidAsync("showErrorModal");
      }
    }
  }

  private async Task UpdateData()
  {
    await GetPixelHistory();
    await GetSensorHistory();
    await GetCommandHistory();

    robotMotorsEnabled = MqttService.robotMotorsEnabled;
    robotColourGain = MqttService.robotColourSensorGain;
  }

  private void SetErrorMessage(string message)
  {
    errorMessage = message;
    Console.WriteLine(message);
    StateHasChanged();
  }

  private async Task GetPixelHistory()
  {
    try
    {
      var result = await Task.Run(() => DatabaseAccess.ReadPixelData(_selectedDate));

      if (result.Count() == 0)
      {
        SetErrorMessage("No pixel data found for selected date");
        return;
      }
      else
      {
        errorMessage = string.Empty;
      }

      foreach (var item in result)
      {
        int index = item.PixelNumber - 1;

        if (index < 0 || index >= pixelColors.Length)
        {
          Console.WriteLine($"Invalid index: {index}. Valid range: 0 to {pixelColors.Length - 1}");
          return;
        }

        pixelColors[index] = item.PixelData switch
        {
          "Green" => "#28a745",
          "Yellow" => "#ffc107",
          "Red" => "#dc3545",
          _ => "#555555"
        };
      }
    }
    catch (Exception ex)
    {
      SetErrorMessage($"Error: {ex.Message}");
    }
  }


  private async Task GetCommandHistory()
  {
    try
    {
      var commandResult = await Task.Run(() => DatabaseAccess.ReadCommandData(_selectedDate));

      if (commandResult.Count() == 0)
      {
        SetErrorMessage("No command data found for selected date");
        return;
      }
      else
      {
        SetErrorMessage(string.Empty);
      }

      foreach (var item in commandResult)
      {
        commandHistory.Add(item);
      }
    }
    catch (Exception ex)
    {
      SetErrorMessage($"Error: {ex.Message}");
    }
  }

  private async Task GetSensorHistory()
  {
    try
    {
      var sensorResult = await Task.Run(() => DatabaseAccess.ReadSensorData(_selectedDate));

      if (sensorResult.Count() == 0)
      {
        SetErrorMessage("No sensor data found for selected date");
        return;
      }
      else
      {
        SetErrorMessage(string.Empty);
      }

      foreach (var item in sensorResult)
      {
        sensorHistory.Add(item);
      }
    }
    catch (Exception ex)
    {
      SetErrorMessage($"Error: {ex.Message}");
    }
  }

  private void MqttSendCommand(string command)
  {
    MQttClient.PublishMessage(command, "CropBotics/command");
  }

  private void MqttSendSettings(string value, string setting) // TODO Implement robot settings (mqtt send)
  {
    MQttClient.PublishMessage(value, $"CropBotics/settings/{setting}");
  }

  private void MqttRequestData(string data)
  {
    MQttClient.PublishMessage(data, $"CropBotics/request");
  }

}