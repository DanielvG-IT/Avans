@page "/"
@rendermode InteractiveServer
@inject SimpleMqtt.SimpleMqttClient MQttClient
@inject IDatabaseAccess DatabaseAccess
@inject IJSRuntime JS

<PageTitle>Robot Data</PageTitle>

<style>
  body {
    font-family: 'Arial', sans-serif;
    background-color: #f8f9fa;
    margin: 0;
    padding: 0;
  }

  .grid-container {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1.5rem;
    margin: 2rem;
    padding: 1rem;
  }

  .card {
    background-color: #fff;
    border-radius: 10px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    padding: 1.5rem;
    transition: transform 0.2s ease, box-shadow 0.2s ease;
  }

  .card:hover {
    transform: translateY(-5px);
    box-shadow: 0 6px 8px rgba(0, 0, 0, 0.15);
  }

  .pixel-container {
    display: grid;
    grid-template-columns: repeat(1, 1fr);
    justify-items: center;
    gap: 10px;
    margin-top: 1rem;
  }

  .pixel {
    width: 60px;
    height: 60px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: bold;
    font-size: 1rem;
    border-radius: 8px;
    color: #fff;
    transition: transform 0.2s ease, box-shadow 0.2s ease;
  }

  .pixel:hover {
    transform: scale(1.1);
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.2);
  }

  .modal-header {
    background-color: #dc3545;
    color: #fff;
  }

  .btn-close {
    filter: invert(1);
  }

  .form-control {
    border-radius: 8px;
    padding: 0.5rem 1rem;
    font-size: 1rem;
  }

  .btn {
    background-color: #007bff;
    color: #fff;
    border: none;
    padding: 0.5rem 1.5rem;
    border-radius: 8px;
    font-size: 1rem;
    transition: background-color 0.2s ease;
  }

  .btn:hover {
    background-color: #0056b3;
  }
</style>

<div class="grid-container">
  <!-- Summary card -->
  <div class="card">
    <h3 class="mb-3">Summary</h3>
    <p>Quick overview of robot data and performance.</p>
    <button class="btn btn-primary" @onclick="@(() => MqttSendCommand("Start"))">Start</button>
  </div>

  <!-- Plant health card -->
  <div class="card">
    <h3 class="mb-3">Plant health</h3>
    <input type="date" class="form-control" id="dateSelect" @bind="SelectedDate" @bind:event="onchange" />
    <!-- Fix date changing updating records -->
    <div class="pixel-container">
      @for (int i = 9; i >= 1; i--)
      {
        <div id="pixel@i" class="pixel" style="background-color: @pixelColors[i-1];">
          @i
        </div>
      }
    </div>
  </div>

  <!-- Performance Insights card -->
  <div class="card">
    <h3 class="mb-3">Performance Insights</h3>
    <p>Visualize key performance indicators.</p>
  </div>

  <!-- Settings card -->
  <div class="card">
    <h3 class="mb-3">Settings</h3>
    <p>Customize robot configurations and data.</p>
  </div>
</div>

<div class="modal fade" id="errorModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="exampleModalLabel">Error</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <!-- TODO Fix modal not showing when no records found -->
        <p>@errorMessage</p>
      </div>
    </div>
  </div>
</div>

@code {
  private string[] pixelColors = Enumerable.Repeat("#555555", 9).ToArray();
  private DateTime _selectedDate = DateTime.Today;
  private DateTime SelectedDate
  {
    get => _selectedDate;
    set
    {
      if (_selectedDate != value)
      {
        _selectedDate = value;
        _ = GetPixelData();
      }
    }
  }
  private string errorMessage = string.Empty;
  private bool firstRender = true;

  protected override async Task OnInitializedAsync()
  {
    await GetPixelData();
  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
    {
      this.firstRender = false;

      if (!string.IsNullOrEmpty(errorMessage))
      {
        await JS.InvokeVoidAsync("showErrorModal");
      }
    }
  }

  private async Task GetPixelData()
  {
    try
    {
      var result = await Task.Run(() => DatabaseAccess.ReadPixelData(_selectedDate));

      if (result.Count() == 0)
      {
        errorMessage = "No pixel data found for selected date";
        return;
      }
      else
      {
        errorMessage = string.Empty;
      }

      foreach (var item in result)
      {
        int index = item.PixelNumber - 1;
        pixelColors[index] = item.PixelData switch
        {
          "Green" => "#28a745",
          "Yellow" => "#ffc107",
          "Red" => "#dc3545",
          _ => "#555555"
        };
      }
    }
    catch (Exception ex)
    {
      errorMessage = $"Error: {ex.Message}";
    }
  }

  // TODO Implement fetching commanddata
  // private async Task GetCommandData() { }

  //TODO Implement fetching sensordata
  // private async Task GetSensorData() { }

  // TODO Implement battery data visualization
  // private async Task GetBatteryData() { }

  // TODO Implement fetching status data
  // private async Task GetStatusData() { }


  // TODO Implement robot controll (mqtt send)
  public void MqttSendCommand(string command)
  {
    MQttClient.PublishMessage(command, "CropBotics/command");
  }


  // TODO Implement robot settings (mqtt send)
  // private async Task SendRobotSettings() { }



  private async Task OnDateChange()
  {
    await GetPixelData();
  }

}